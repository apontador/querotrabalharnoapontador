if (!this.JSON) {
    this.JSON = {}
}(function () {
    function f(n) {
        return n < 10 ? "0" + n : n
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function (key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {
            return this.valueOf()
        }
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap, indent, meta = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        }, rep;

    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + string + '"'
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap,
            partial, value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key)
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value)
        }
        switch (typeof value) {
        case "string":
            return quote(value);
        case "number":
            return isFinite(value) ? String(value) : "null";
        case "boolean":
        case "null":
            return String(value);
        case "object":
            if (!value) {
                return "null"
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null"
                }
                v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                gap = mind;
                return v
            }
            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === "string") {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ": " : ":") + v)
                        }
                    }
                }
            } else {
                for (k in value) {
                    if (Object.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ": " : ":") + v)
                        }
                    }
                }
            }
            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v
        }
    }
    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else {
                if (typeof space === "string") {
                    indent = space
                }
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {
                "": value
            })
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {
            var j;

            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({
                    "": j
                }, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    }
}());
(function (d, c) {
    if (typeof module != "undefined") {
        module.exports = c
    } else {
        if (typeof define === "function" && define.amd) {
            define(c)
        } else {
            d.store = c
        }
    }
})(this, (function () {
    var p = {}, q = window,
        n = q.document,
        t = "localStorage",
        e = "globalStorage",
        s = "__storejs__",
        r;
    p.disabled = false;
    p.set = function (b, a) {};
    p.get = function (a) {};
    p.remove = function (a) {};
    p.clear = function () {};
    p.transact = function (b, a) {
        var c = p.get(b);
        if (typeof c == "undefined") {
            c = {}
        }
        a(c);
        p.set(b, c)
    };
    p.serialize = function (a) {
        return JSON.stringify(a)
    };
    p.deserialize = function (a) {
        if (typeof a != "string") {
            return undefined
        }
        return JSON.parse(a)
    };

    function u() {
        try {
            return (t in q && q[t])
        } catch (a) {
            return false
        }
    }
    function m() {
        try {
            return (e in q && q[e] && q[e][q.location.hostname])
        } catch (a) {
            return false
        }
    }
    if (u()) {
        r = q[t];
        p.set = function (b, a) {
            r.setItem(b, p.serialize(a))
        };
        p.get = function (a) {
            return p.deserialize(r.getItem(a))
        };
        p.remove = function (a) {
            r.removeItem(a)
        };
        p.clear = function () {
            r.clear()
        }
    } else {
        if (m()) {
            r = q[e][q.location.hostname];
            p.set = function (b, a) {
                r[b] = p.serialize(a)
            };
            p.get = function (a) {
                return p.deserialize(r[a] && r[a].value)
            };
            p.remove = function (a) {
                delete r[a]
            };
            p.clear = function () {
                for (var a in r) {
                    delete r[a]
                }
            }
        } else {
            if (n.documentElement.addBehavior) {
                var r = n.createElement("div");

                function v(a) {
                    return function () {
                        var c = Array.prototype.slice.call(arguments, 0);
                        c.unshift(r);
                        n.body.appendChild(r);
                        r.addBehavior("#default#userData");
                        r.load(t);
                        var b = a.apply(p, c);
                        n.body.removeChild(r);
                        return b
                    }
                }
                p.set = v(function (c, b, a) {
                    c.setAttribute(b, p.serialize(a));
                    c.save(t)
                });
                p.get = v(function (a, b) {
                    return p.deserialize(a.getAttribute(b))
                });
                p.remove = v(function (a, b) {
                    a.removeAttribute(b);
                    a.save(t)
                });
                p.clear = v(function (c) {
                    var a = c.XMLDocument.documentElement.attributes;
                    c.load(t);
                    for (var d = 0, b; b = a[d]; d++) {
                        c.removeAttribute(b.name)
                    }
                    c.save(t)
                })
            }
        }
    }
    try {
        p.set(s, s);
        if (p.get(s) != s) {
            p.disabled = true
        }
        p.remove(s)
    } catch (o) {
        p.disabled = true
    }
    return p
})());
(function (b) {
    jQuery.fn.getUrlParam = function (h) {
        h = escape(unescape(h));
        var i = [];
        var g = null;
        if (b(this).attr("nodeName") === "#document") {
            if (window.location.search.search(h) > -1) {
                g = window.location.search.substr(1).split("&")
            }
        } else {
            if (b(this).attr("src") !== "undefined") {
                var j = b(this).attr("src");
                if (j.indexOf("?") > -1) {
                    g = j.substr(j.indexOf("?") + 1).split("&")
                }
            } else {
                if (b(this).attr("href") !== "undefined") {
                    var j = b(this).attr("href");
                    if (j.indexOf("?") > -1) {
                        g = j.substr(j.indexOf("?") + 1).split("&")
                    }
                } else {
                    return null
                }
            }
        }
        if (!(g instanceof Array)) {
            return null
        }
        for (var a = 0; a < g.length; a++) {
            if (escape(unescape(g[a].split("=")[0])) == h) {
                i.push(g[a].split("=")[1])
            }
        }
        if (i.length == 0) {
            return null
        } else {
            if (i.length == 1) {
                return i[0]
            } else {
                return i
            }
        }
    }
})(jQuery);
jQuery.cookie = function (m, l, h) {
    if (arguments.length > 1 && (l === null || typeof l !== "object")) {
        h = jQuery.extend({}, h);
        if (l === null) {
            h.expires = -1
        }
        if (typeof h.expires === "number") {
            var j = h.expires,
                n = h.expires = new Date();
            n.setDate(n.getDate() + j)
        }
        return (document.cookie = [encodeURIComponent(m), "=", h.raw ? String(l) : encodeURIComponent(String(l)), h.expires ? "; expires=" + h.expires.toUTCString() : "", h.path ? "; path=" + h.path : "", h.domain ? "; domain=" + h.domain : "", h.secure ? "; secure" : ""].join(""))
    }
    h = l || {};
    var i, k = h.raw ? function (a) {
            return a
        } : decodeURIComponent;
    return (i = new RegExp("(?:^|; )" + encodeURIComponent(m) + "=([^;]*)").exec(document.cookie)) ? k(i[1]) : null
};
(function (g) {
    function c(i, q, d) {
        var j = this,
            e = i.add(this),
            l = i.find(d.tabs),
            a = q.jquery ? q : i.children(q),
            b;
        l.length || (l = i.children());
        a.length || (a = i.parent().find(q));
        a.length || (a = g(q));
        g.extend(this, {
            click: function (m, n) {
                var o = l.eq(m);
                if (typeof m == "string" && m.replace("#", "")) {
                    o = l.filter("[href*=" + m.replace("#", "") + "]");
                    m = Math.max(l.index(o), 0)
                }
                if (d.rotate) {
                    var k = l.length - 1;
                    if (m < 0) {
                        return j.click(k, n)
                    }
                    if (m > k) {
                        return j.click(0, n)
                    }
                }
                if (!o.length) {
                    if (b >= 0) {
                        return j
                    }
                    m = d.initialIndex;
                    o = l.eq(m)
                }
                if (m === b) {
                    return j
                }
                n = n || g.Event();
                n.type = "onBeforeClick";
                e.trigger(n, [m]);
                if (!n.isDefaultPrevented()) {
                    h[d.effect].call(j, m, function () {
                        n.type = "onClick";
                        e.trigger(n, [m])
                    });
                    b = m;
                    l.removeClass(d.current);
                    o.addClass(d.current);
                    return j
                }
            },
            getConf: function () {
                return d
            },
            getTabs: function () {
                return l
            },
            getPanes: function () {
                return a
            },
            getCurrentPane: function () {
                return a.eq(b)
            },
            getCurrentTab: function () {
                return l.eq(b)
            },
            getIndex: function () {
                return b
            },
            next: function () {
                return j.click(b + 1)
            },
            prev: function () {
                return j.click(b - 1)
            },
            destroy: function () {
                l.unbind(d.event).removeClass(d.current);
                a.find("a[href^=#]").unbind("click.T");
                return j
            }
        });
        g.each("onBeforeClick,onClick".split(","), function (k, m) {
            g.isFunction(d[m]) && g(j).bind(m, d[m]);
            j[m] = function (n) {
                n && g(j).bind(m, n);
                return j
            }
        });
        if (d.history && g.fn.history) {
            g.tools.history.init(l);
            d.event = "history"
        }
        l.each(function (k) {
            g(this).bind(d.event, function (m) {
                j.click(k, m);
                return m.preventDefault()
            })
        });
        a.find("a[href^=#]").bind("click.T", function (k) {
            j.click(g(this).attr("href"), k)
        });
        if (location.hash && d.tabs == "a" && i.find("[href=" + location.hash + "]").length) {
            j.click(location.hash)
        } else {
            if (d.initialIndex === 0 || d.initialIndex > 0) {
                j.click(d.initialIndex)
            }
        }
    }
    g.tools = g.tools || {
        version: "1.2.5"
    };
    g.tools.tabs = {
        conf: {
            tabs: "a",
            current: "current",
            onBeforeClick: null,
            onClick: null,
            effect: "default",
            initialIndex: 0,
            event: "click",
            rotate: false,
            history: false
        },
        addEffect: function (a, b) {
            h[a] = b
        }
    };
    var h = {
        "default": function (a, b) {
            this.getPanes().hide().eq(a).show();
            b.call()
        },
        fade: function (a, j) {
            var d = this.getConf(),
                b = d.fadeOutSpeed,
                e = this.getPanes();
            b ? e.fadeOut(b) : e.hide();
            e.eq(a).fadeIn(d.fadeInSpeed, j)
        },
        slide: function (a, b) {
            this.getPanes().slideUp(200);
            this.getPanes().eq(a).slideDown(400, b)
        },
        ajax: function (a, b) {
            this.getPanes().eq(0).load(this.getTabs().eq(a).attr("href"), b)
        }
    }, f;
    g.tools.tabs.addEffect("horizontal", function (a, b) {
        f || (f = this.getPanes().eq(0).width());
        this.getCurrentPane().animate({
            width: 0
        }, function () {
            g(this).hide()
        });
        this.getPanes().eq(a).animate({
            width: f
        }, function () {
            g(this).show();
            b.call()
        })
    });
    g.fn.tabs = function (a, d) {
        var b = this.data("tabs");
        if (b) {
            b.destroy();
            this.removeData("tabs")
        }
        if (g.isFunction(d)) {
            d = {
                onBeforeClick: d
            }
        }
        d = g.extend({}, g.tools.tabs.conf, d);
        this.each(function () {
            b = new c(g(this), a, d);
            g(this).data("tabs", b)
        });
        return d.api ? b : this
    }
})(jQuery);
(function (f) {
    function e(n, k) {
        function i(p) {
            var o = f(p);
            return o.length < 2 ? o : n.parent().find(p)
        }
        var l = this,
            b = n.add(this),
            m = n.data("tabs"),
            a, d = true,
            j = i(k.next).click(function () {
                m.next()
            }),
            g = i(k.prev).click(function () {
                m.prev()
            });
        f.extend(l, {
            getTabs: function () {
                return m
            },
            getConf: function () {
                return k
            },
            play: function () {
                if (a) {
                    return l
                }
                var o = f.Event("onBeforePlay");
                b.trigger(o);
                if (o.isDefaultPrevented()) {
                    return l
                }
                a = setInterval(m.next, k.interval);
                d = false;
                b.trigger("onPlay");
                return l
            },
            pause: function () {
                if (!a) {
                    return l
                }
                var o = f.Event("onBeforePause");
                b.trigger(o);
                if (o.isDefaultPrevented()) {
                    return l
                }
                a = clearInterval(a);
                b.trigger("onPause");
                return l
            },
            stop: function () {
                l.pause();
                d = true
            }
        });
        f.each("onBeforePlay,onPlay,onBeforePause,onPause".split(","), function (p, o) {
            f.isFunction(k[o]) && f(l).bind(o, k[o]);
            l[o] = function (q) {
                return f(l).bind(o, q)
            }
        });
        k.autopause && m.getTabs().add(j).add(g).add(m.getPanes()).hover(l.pause, function () {
            d || l.play()
        });
        k.autoplay && l.play();
        k.clickable && m.getPanes().click(function () {
            m.next()
        });
        if (!m.getConf().rotate) {
            var h = k.disabledClass;
            m.getIndex() || g.addClass(h);
            m.onBeforeClick(function (p, o) {
                g.toggleClass(h, !o);
                j.toggleClass(h, o == m.getTabs().length - 1)
            })
        }
    }
    var c;
    c = f.tools.tabs.slideshow = {
        conf: {
            next: ".forward",
            prev: ".backward",
            disabledClass: "disabled",
            autoplay: false,
            autopause: true,
            interval: 3000,
            clickable: true,
            api: false
        }
    };
    f.fn.slideshow = function (a) {
        var b = this.data("slideshow");
        if (b) {
            return b
        }
        a = f.extend({}, c.conf, a);
        this.each(function () {
            b = new e(f(this), a);
            f(this).data("slideshow", b)
        });
        return a.api ? b : this
    }
})(jQuery);
(function (e) {
    function h(i, j, o) {
        var b = o.relative ? i.position().top : i.offset().top,
            a = o.relative ? i.position().left : i.offset().left,
            c = o.position[0];
        b -= j.outerHeight() - o.offset[0];
        a += i.outerWidth() + o.offset[1];
        if (/iPad/i.test(navigator.userAgent)) {
            b -= e(window).scrollTop()
        }
        var d = j.outerHeight() + i.outerHeight();
        if (c == "center") {
            b += d / 2
        }
        if (c == "bottom") {
            b += d
        }
        c = o.position[1];
        i = j.outerWidth() + i.outerWidth();
        if (c == "center") {
            a -= i / 2
        }
        if (c == "left") {
            a -= i
        }
        return {
            top: b,
            left: a
        }
    }
    function f(j, r) {
        var s = this,
            v = j.add(s),
            t, E = 0,
            d = 0,
            l = j.attr("title"),
            m = j.attr("data-tooltip"),
            q = g[r.effect],
            k, a = j.is(":input"),
            c = a && j.is(":checkbox, :radio, select, :button, :submit"),
            b = j.attr("type"),
            i = r.events[b] || r.events[a ? c ? "widget" : "input" : "def"];
        if (!q) {
            throw 'Nonexistent effect "' + r.effect + '"'
        }
        i = i.split(/,\s*/);
        if (i.length != 2) {
            throw "Tooltip: bad events configuration for " + b
        }
        j.bind(i[0], function (n) {
            clearTimeout(E);
            if (r.predelay) {
                d = setTimeout(function () {
                    s.show(n)
                }, r.predelay)
            } else {
                s.show(n)
            }
        }).bind(i[1], function (n) {
            clearTimeout(d);
            if (r.delay) {
                E = setTimeout(function () {
                    s.hide(n)
                }, r.delay)
            } else {
                s.hide(n)
            }
        });
        if (l && r.cancelDefault) {
            j.removeAttr("title");
            j.data("title", l)
        }
        e.extend(s, {
            show: function (n) {
                if (!t) {
                    if (m) {
                        t = e(m)
                    } else {
                        if (r.tip) {
                            t = e(r.tip).eq(0)
                        } else {
                            if (l) {
                                t = e(r.layout).addClass(r.tipClass).appendTo(document.body).hide().append(l)
                            } else {
                                t = j.next();
                                t.length || (t = j.parent().next())
                            }
                        }
                    }
                    if (!t.length) {
                        throw "Cannot find tooltip for " + j
                    }
                }
                if (s.isShown()) {
                    return s
                }
                t.stop(true, true);
                var o = h(j, t, r);
                r.tip && t.html(j.data("title"));
                n = n || e.Event();
                n.type = "onBeforeShow";
                v.trigger(n, [o]);
                if (n.isDefaultPrevented()) {
                    return s
                }
                o = h(j, t, r);
                t.css({
                    position: "absolute",
                    top: o.top,
                    left: o.left
                });
                k = true;
                q[0].call(s, function () {
                    n.type = "onShow";
                    k = "full";
                    v.trigger(n)
                });
                o = r.events.tooltip.split(/,\s*/);
                if (!t.data("__set")) {
                    t.bind(o[0], function () {
                        clearTimeout(E);
                        clearTimeout(d)
                    });
                    o[1] && !j.is("input:not(:checkbox, :radio), textarea") && t.bind(o[1], function (p) {
                        p.relatedTarget != j[0] && j.trigger(i[1].split(" ")[0])
                    });
                    t.data("__set", true)
                }
                return s
            },
            hide: function (n) {
                if (!t || !s.isShown()) {
                    return s
                }
                n = n || e.Event();
                n.type = "onBeforeHide";
                v.trigger(n);
                if (!n.isDefaultPrevented()) {
                    k = false;
                    g[r.effect][1].call(s, function () {
                        n.type = "onHide";
                        v.trigger(n)
                    });
                    return s
                }
            },
            isShown: function (n) {
                return n ? k == "full" : k
            },
            getConf: function () {
                return r
            },
            getTip: function () {
                return t
            },
            getTrigger: function () {
                return j
            }
        });
        e.each("onHide,onBeforeShow,onShow,onBeforeHide".split(","), function (n, o) {
            e.isFunction(r[o]) && e(s).bind(o, r[o]);
            s[o] = function (p) {
                p && e(s).bind(o, p);
                return s
            }
        })
    }
    e.tools = e.tools || {
        version: "1.2.5"
    };
    e.tools.tooltip = {
        conf: {
            effect: "toggle",
            fadeOutSpeed: "fast",
            predelay: 0,
            delay: 30,
            opacity: 1,
            tip: 0,
            position: ["top", "center"],
            offset: [0, 0],
            relative: false,
            cancelDefault: true,
            events: {
                def: "mouseenter,mouseleave",
                input: "focus,blur",
                widget: "focus mouseenter,blur mouseleave",
                tooltip: "mouseenter,mouseleave"
            },
            layout: "<div/>",
            tipClass: "tooltip"
        },
        addEffect: function (b, c, a) {
            g[b] = [c, a]
        }
    };
    var g = {
        toggle: [function (b) {
            var c = this.getConf(),
                a = this.getTip();
            c = c.opacity;
            c < 1 && a.css({
                opacity: c
            });
            a.show();
            b.call()
        }, function (a) {
            this.getTip().hide();
            a.call()
        }],
        fade: [function (a) {
            var b = this.getConf();
            this.getTip().fadeTo(b.fadeInSpeed, b.opacity, a)
        }, function (a) {
            this.getTip().fadeOut(this.getConf().fadeOutSpeed, a)
        }]
    };
    e.fn.tooltip = function (a) {
        var b = this.data("tooltip");
        if (b) {
            return b
        }
        a = e.extend(true, {}, e.tools.tooltip.conf, a);
        if (typeof a.position == "string") {
            a.position = a.position.split(/,?\s/)
        }
        this.each(function () {
            b = new f(e(this), a);
            e(this).data("tooltip", b)
        });
        return a.api ? b : this
    }
})(jQuery);
(function (f) {
    var e = f.tools.tooltip;
    f.extend(e.conf, {
        direction: "up",
        bounce: false,
        slideOffset: 10,
        slideInSpeed: 200,
        slideOutSpeed: 200,
        slideFade: !f.browser.msie
    });
    var d = {
        up: ["-", "top"],
        down: ["+", "top"],
        left: ["-", "left"],
        right: ["+", "left"]
    };
    e.addEffect("slide", function (c) {
        var g = this.getConf(),
            b = this.getTip(),
            k = g.slideFade ? {
                opacity: g.opacity
            } : {}, a = d[g.direction] || d.up;
        k[a[1]] = a[0] + "=" + g.slideOffset;
        g.slideFade && b.css({
            opacity: 0
        });
        b.show().animate(k, g.slideInSpeed, c)
    }, function (c) {
        var h = this.getConf(),
            b = h.slideOffset,
            m = h.slideFade ? {
                opacity: 0
            } : {}, a = d[h.direction] || d.up,
            g = "" + a[0];
        if (h.bounce) {
            g = g == "+" ? "-" : "+"
        }
        m[a[1]] = g + "=" + b;
        this.getTip().animate(m, h.slideOutSpeed, function () {
            f(this).hide();
            c.call()
        })
    })
})(jQuery);
(function (g) {
    function e(d) {
        var a = g(window),
            b = a.width() + a.scrollLeft(),
            c = a.height() + a.scrollTop();
        return [d.offset().top <= a.scrollTop(), b <= d.offset().left + d.width(), c <= d.offset().top + d.height(), a.scrollLeft() >= d.offset().left]
    }
    function f(b) {
        for (var a = b.length; a--;) {
            if (b[a]) {
                return false
            }
        }
        return true
    }
    var h = g.tools.tooltip;
    h.dynamic = {
        conf: {
            classNames: "top right bottom left"
        }
    };
    g.fn.dynamic = function (c) {
        if (typeof c == "number") {
            c = {
                speed: c
            }
        }
        c = g.extend({}, h.dynamic.conf, c);
        var a = c.classNames.split(/\s/),
            b;
        this.each(function () {
            var d = g(this).tooltip().onBeforeShow(function (i, l) {
                i = this.getTip();
                var m = this.getConf();
                b || (b = [m.position[0], m.position[1], m.offset[0], m.offset[1], g.extend({}, m)]);
                g.extend(m, b[4]);
                m.position = [b[0], b[1]];
                m.offset = [b[2], b[3]];
                i.css({
                    visibility: "hidden",
                    position: "absolute",
                    top: l.top,
                    left: l.left
                }).show();
                l = e(i);
                if (!f(l)) {
                    if (l[2]) {
                        g.extend(m, c.top);
                        m.position[0] = "top";
                        i.addClass(a[0])
                    }
                    if (l[3]) {
                        g.extend(m, c.right);
                        m.position[1] = "right";
                        i.addClass(a[1])
                    }
                    if (l[0]) {
                        g.extend(m, c.bottom);
                        m.position[0] = "bottom";
                        i.addClass(a[2])
                    }
                    if (l[1]) {
                        g.extend(m, c.left);
                        m.position[1] = "left";
                        i.addClass(a[3])
                    }
                    if (l[0] || l[2]) {
                        m.offset[0] *= -1
                    }
                    if (l[1] || l[3]) {
                        m.offset[1] *= -1
                    }
                }
                i.css({
                    visibility: "visible"
                }).hide()
            });
            d.onBeforeShow(function () {
                var i = this.getConf();
                this.getTip();
                setTimeout(function () {
                    i.position = [b[0], b[1]];
                    i.offset = [b[2], b[3]]
                }, 0)
            });
            d.onHide(function () {
                var i = this.getTip();
                i.removeClass(c.classNames)
            });
            ret = d
        });
        return c.api ? ret : this
    }
})(jQuery);
(function (g) {
    function h(b, a) {
        var c = g(a);
        return c.length < 2 ? c : b.parent().find(a)
    }
    function e(s, q) {
        var o = this,
            d = s.add(o),
            t = s.children(),
            b = 0,
            a = q.vertical;
        f || (f = o);
        if (t.length > 1) {
            t = g(q.items, s)
        }
        g.extend(o, {
            getConf: function () {
                return q
            },
            getIndex: function () {
                return b
            },
            getSize: function () {
                return o.getItems().size()
            },
            getNaviButtons: function () {
                return j.add(l)
            },
            getRoot: function () {
                return s
            },
            getItemWrap: function () {
                return t
            },
            getItems: function () {
                return t.children(q.item).not("." + q.clonedClass)
            },
            move: function (k, i) {
                return o.seekTo(b + k, i)
            },
            next: function (i) {
                return o.move(1, i)
            },
            prev: function (i) {
                return o.move(-1, i)
            },
            begin: function (i) {
                return o.seekTo(0, i)
            },
            end: function (i) {
                return o.seekTo(o.getSize() - 1, i)
            },
            focus: function () {
                return f = o
            },
            addItem: function (i) {
                i = g(i);
                if (q.circular) {
                    t.children("." + q.clonedClass + ":last").before(i);
                    t.children("." + q.clonedClass + ":first").replaceWith(i.clone().addClass(q.clonedClass))
                } else {
                    t.append(i)
                }
                d.trigger("onAddItem", [i]);
                return o
            },
            seekTo: function (u, i, p) {
                u.jquery || (u *= 1);
                if (q.circular && u === 0 && b == -1 && i !== 0) {
                    return o
                }
                if (!q.circular && u < 0 || u > o.getSize() || u < -1) {
                    return o
                }
                var r = u;
                if (u.jquery) {
                    u = o.getItems().index(u)
                } else {
                    r = o.getItems().eq(u)
                }
                var k = g.Event("onBeforeSeek");
                if (!p) {
                    d.trigger(k, [u, i]);
                    if (k.isDefaultPrevented() || !r.length) {
                        return o
                    }
                }
                r = a ? {
                    top: -r.position().top
                } : {
                    left: -r.position().left
                };
                b = u;
                f = o;
                if (i === undefined) {
                    i = q.speed
                }
                t.animate(r, i, q.easing, p || function () {
                    d.trigger("onSeek", [u])
                });
                return o
            }
        });
        g.each(["onBeforeSeek", "onSeek", "onAddItem"], function (k, i) {
            g.isFunction(q[i]) && g(o).bind(i, q[i]);
            o[i] = function (p) {
                p && g(o).bind(i, p);
                return o
            }
        });
        if (q.circular) {
            var m = o.getItems().slice(-1).clone().prependTo(t),
                n = o.getItems().eq(1).clone().appendTo(t);
            m.add(n).addClass(q.clonedClass);
            o.onBeforeSeek(function (p, i, k) {
                if (!p.isDefaultPrevented()) {
                    if (i == -1) {
                        o.seekTo(m, k, function () {
                            o.end(0)
                        });
                        return p.preventDefault()
                    } else {
                        i == o.getSize() && o.seekTo(n, k, function () {
                            o.begin(0)
                        })
                    }
                }
            });
            o.seekTo(0, 0, function () {})
        }
        var j = h(s, q.prev).click(function () {
            o.prev()
        }),
            l = h(s, q.next).click(function () {
                o.next()
            });
        if (!q.circular && o.getSize() > 1) {
            o.onBeforeSeek(function (k, i) {
                setTimeout(function () {
                    if (!k.isDefaultPrevented()) {
                        j.toggleClass(q.disabledClass, i <= 0);
                        l.toggleClass(q.disabledClass, i >= o.getSize() - 1)
                    }
                }, 1)
            });
            q.initialIndex || j.addClass(q.disabledClass)
        }
        q.mousewheel && g.fn.mousewheel && s.mousewheel(function (k, i) {
            if (q.mousewheel) {
                o.move(i < 0 ? 1 : -1, q.wheelSpeed || 50);
                return false
            }
        });
        if (q.touch) {
            var c = {};
            t[0].ontouchstart = function (i) {
                i = i.touches[0];
                c.x = i.clientX;
                c.y = i.clientY
            };
            t[0].ontouchmove = function (p) {
                if (p.touches.length == 1 && !t.is(":animated")) {
                    var i = p.touches[0],
                        k = c.x - i.clientX;
                    i = c.y - i.clientY;
                    o[a && i > 0 || !a && k > 0 ? "next" : "prev"]();
                    p.preventDefault()
                }
            }
        }
        q.keyboard && g(document).bind("keydown.scrollable", function (k) {
            if (!(!q.keyboard || k.altKey || k.ctrlKey || g(k.target).is(":input"))) {
                if (!(q.keyboard != "static" && f != o)) {
                    var i = k.keyCode;
                    if (a && (i == 38 || i == 40)) {
                        o.move(i == 38 ? -1 : 1);
                        return k.preventDefault()
                    }
                    if (!a && (i == 37 || i == 39)) {
                        o.move(i == 37 ? -1 : 1);
                        return k.preventDefault()
                    }
                }
            }
        });
        q.initialIndex && o.seekTo(q.initialIndex, 0, function () {})
    }
    g.tools = g.tools || {
        version: "1.2.5"
    };
    g.tools.scrollable = {
        conf: {
            activeClass: "active",
            circular: false,
            clonedClass: "cloned",
            disabledClass: "disabled",
            easing: "swing",
            initialIndex: 0,
            item: null,
            items: ".items",
            keyboard: true,
            mousewheel: false,
            next: ".next",
            prev: ".prev",
            speed: 400,
            vertical: false,
            touch: true,
            wheelSpeed: 0
        }
    };
    var f;
    g.fn.scrollable = function (b) {
        var a = this.data("scrollable");
        if (a) {
            return a
        }
        b = g.extend({}, g.tools.scrollable.conf, b);
        this.each(function () {
            a = new e(g(this), b);
            g(this).data("scrollable", a)
        });
        return b.api ? a : this
    }
})(jQuery);
(function (b) {
    var d = b.tools.scrollable;
    d.autoscroll = {
        conf: {
            autoplay: true,
            interval: 3000,
            autopause: true
        }
    };
    b.fn.autoscroll = function (c) {
        if (typeof c == "number") {
            c = {
                interval: c
            }
        }
        var g = b.extend({}, d.autoscroll.conf, c),
            a;
        this.each(function () {
            var h = b(this).data("scrollable");
            if (h) {
                a = h
            }
            var e, f = true;
            h.play = function () {
                if (!e) {
                    f = false;
                    e = setInterval(function () {
                        h.next()
                    }, g.interval)
                }
            };
            h.pause = function () {
                e = clearInterval(e)
            };
            h.stop = function () {
                h.pause();
                f = true
            };
            g.autopause && h.getRoot().add(h.getNaviButtons()).hover(h.pause, h.play);
            g.autoplay && h.play()
        });
        return g.api ? a : this
    }
})(jQuery);
(function (f) {
    function d(c, a) {
        var b = f(a);
        return b.length < 2 ? b : c.parent().find(a)
    }
    var e = f.tools.scrollable;
    e.navigator = {
        conf: {
            navi: ".navi",
            naviItem: null,
            activeClass: "active",
            indexed: false,
            idPrefix: null,
            history: false
        }
    };
    f.fn.navigator = function (b) {
        if (typeof b == "string") {
            b = {
                navi: b
            }
        }
        b = f.extend({}, e.navigator.conf, b);
        var a;
        this.each(function () {
            function q(m, g, i) {
                n.seekTo(g);
                if (w) {
                    if (location.hash) {
                        location.hash = m.attr("href").replace("#", "")
                    }
                } else {
                    return i.preventDefault()
                }
            }
            function o() {
                return c.find(b.naviItem || "> *")
            }
            function j(i) {
                var g = f("<" + (b.naviItem || "a") + "/>").click(function (m) {
                    q(f(this), i, m)
                }).attr("href", "#" + i);
                i === 0 && g.addClass(h);
                b.indexed && g.text(i + 1);
                b.idPrefix && g.attr("id", b.idPrefix + i);
                return g.appendTo(c)
            }
            function k(i, g) {
                i = o().eq(g.replace("#", ""));
                i.length || (i = o().filter("[href=" + g + "]"));
                i.click()
            }
            var n = f(this).data("scrollable"),
                c = b.navi.jquery ? b.navi : d(n.getRoot(), b.navi),
                l = n.getNaviButtons(),
                h = b.activeClass,
                w = b.history && f.fn.history;
            if (n) {
                a = n
            }
            n.getNaviButtons = function () {
                return l.add(c)
            };
            o().length ? o().each(function (g) {
                f(this).click(function (i) {
                    q(f(this), g, i)
                })
            }) : f.each(n.getItems(), function (g) {
                j(g)
            });
            n.onBeforeSeek(function (i, g) {
                setTimeout(function () {
                    if (!i.isDefaultPrevented()) {
                        var m = o().eq(g);
                        !i.isDefaultPrevented() && m.length && o().removeClass(h).eq(g).addClass(h)
                    }
                }, 1)
            });
            n.onAddItem(function (i, g) {
                g = j(n.getItems().index(g));
                w && g.history(k)
            });
            w && o().history(k)
        });
        return b.api ? a : this
    }
})(jQuery);
(function (a) {
    function h(o, m) {
        var n = this,
            b = o.add(n),
            j = a(window),
            c, p, d, x = a.tools.expose && (m.mask || m.expose),
            e = Math.random().toString().slice(10);
        if (x) {
            if (typeof x == "string") {
                x = {
                    color: x
                }
            }
            x.closeOnClick = x.closeOnEsc = false
        }
        var k = m.target || o.attr("rel");
        p = k ? a(k) : o;
        if (!p.length) {
            throw "Could not find Overlay: " + k
        }
        o && o.index(p) == -1 && o.click(function (i) {
            n.load(i);
            return i.preventDefault()
        });
        a.extend(n, {
            load: function (t) {
                if (n.isOpened()) {
                    return n
                }
                var l = f[m.effect];
                if (!l) {
                    throw 'Overlay: cannot find effect : "' + m.effect + '"'
                }
                m.oneInstance && a.each(g, function () {
                    this.close(t)
                });
                t = t || a.Event();
                t.type = "onBeforeLoad";
                b.trigger(t);
                if (t.isDefaultPrevented()) {
                    return n
                }
                d = true;
                x && a(p).expose(x);
                var q = m.top,
                    i = m.left,
                    r = p.outerWidth({
                        margin: true
                    }),
                    s = p.outerHeight({
                        margin: true
                    });
                if (typeof q == "string") {
                    q = q == "center" ? Math.max((j.height() - s) / 2, 0) : parseInt(q, 10) / 100 * j.height()
                }
                if (i == "center") {
                    i = Math.max((j.width() - r) / 2, 0)
                }
                l[0].call(n, {
                    top: q,
                    left: i
                }, function () {
                    if (d) {
                        t.type = "onLoad";
                        b.trigger(t)
                    }
                });
                x && m.closeOnClick && a.mask.getMask().one("click", n.close);
                m.closeOnClick && a(document).bind("click." + e, function (u) {
                    a(u.target).parents(p).length || n.close(u)
                });
                m.closeOnEsc && a(document).bind("keydown." + e, function (u) {
                    u.keyCode == 27 && n.close(u)
                });
                return n
            },
            close: function (i) {
                if (!n.isOpened()) {
                    return n
                }
                i = i || a.Event();
                i.type = "onBeforeClose";
                b.trigger(i);
                if (!i.isDefaultPrevented()) {
                    d = false;
                    f[m.effect][1].call(n, function () {
                        i.type = "onClose";
                        b.trigger(i)
                    });
                    a(document).unbind("click." + e).unbind("keydown." + e);
                    x && a.mask.close();
                    return n
                }
            },
            getOverlay: function () {
                return p
            },
            getTrigger: function () {
                return o
            },
            getClosers: function () {
                return c
            },
            isOpened: function () {
                return d
            },
            getConf: function () {
                return m
            }
        });
        a.each("onBeforeLoad,onStart,onLoad,onBeforeClose,onClose".split(","), function (i, l) {
            a.isFunction(m[l]) && a(n).bind(l, m[l]);
            n[l] = function (q) {
                q && a(n).bind(l, q);
                return n
            }
        });
        c = p.find(m.close || ".close");
        if (!c.length && !m.close) {
            c = a('<a class="close"></a>');
            p.prepend(c)
        }
        c.click(function (i) {
            n.close(i)
        });
        m.load && n.load()
    }
    a.tools = a.tools || {
        version: "1.2.5"
    };
    a.tools.overlay = {
        addEffect: function (d, b, c) {
            f[d] = [b, c]
        },
        conf: {
            close: null,
            closeOnClick: true,
            closeOnEsc: true,
            closeSpeed: "fast",
            effect: "default",
            fixed: !a.browser.msie || a.browser.version > 6,
            left: "center",
            load: false,
            mask: null,
            oneInstance: true,
            speed: "normal",
            target: null,
            top: "10%"
        }
    };
    var g = [],
        f = {};
    a.tools.overlay.addEffect("default", function (d, b) {
        var c = this.getConf(),
            e = a(window);
        if (!c.fixed) {
            d.top += e.scrollTop();
            d.left += e.scrollLeft()
        }
        d.position = c.fixed ? "fixed" : "absolute";
        this.getOverlay().css(d).fadeIn(c.speed, b)
    }, function (b) {
        this.getOverlay().fadeOut(this.getConf().closeSpeed, b)
    });
    a.fn.overlay = function (c) {
        var b = this.data("overlay");
        if (b) {
            return b
        }
        if (a.isFunction(c)) {
            c = {
                onBeforeLoad: c
            }
        }
        c = a.extend(true, {}, a.tools.overlay.conf, c);
        this.each(function () {
            b = new h(a(this), c);
            g.push(b);
            a(this).data("overlay", b)
        });
        return c.api ? b : this
    }
})(jQuery);
(function (l) {
    function f(a) {
        var b = a.offset();
        return {
            top: b.top + a.height() / 2,
            left: b.left + a.width() / 2
        }
    }
    var h = l.tools.overlay,
        j = l(window);
    l.extend(h.conf, {
        start: {
            top: null,
            left: null
        },
        fadeInSpeed: "fast",
        zIndex: 9999
    });

    function i(x, a) {
        var n = this.getOverlay(),
            w = this.getConf(),
            b = this.getTrigger(),
            m = this,
            e = n.outerWidth({
                margin: true
            }),
            p = n.data("img"),
            g = w.fixed ? "fixed" : "absolute";
        if (!p) {
            p = n.css("backgroundImage");
            if (!p) {
                throw "background-image CSS property not set for overlay"
            }
            p = p.slice(p.indexOf("(") + 1, p.indexOf(")")).replace(/\"/g, "");
            n.css("backgroundImage", "none");
            p = l('<img src="' + p + '"/>');
            p.css({
                border: 0,
                display: "none"
            }).width(e);
            l("body").append(p);
            n.data("img", p)
        }
        var c = w.start.top || Math.round(j.height() / 2),
            d = w.start.left || Math.round(j.width() / 2);
        if (b) {
            b = f(b);
            c = b.top;
            d = b.left
        }
        if (w.fixed) {
            c -= j.scrollTop();
            d -= j.scrollLeft()
        } else {
            x.top += j.scrollTop();
            x.left += j.scrollLeft()
        }
        p.css({
            position: "absolute",
            top: c,
            left: d,
            width: 0,
            zIndex: w.zIndex
        }).show();
        x.position = g;
        n.css(x);
        p.animate({
            top: n.css("top"),
            left: n.css("left"),
            width: e
        }, w.speed, function () {
            n.css("zIndex", w.zIndex + 1).fadeIn(w.fadeInSpeed, function () {
                m.isOpened() && !l(this).index(n) ? a.call() : n.hide()
            })
        }).css("position", g)
    }
    function k(b) {
        var c = this.getOverlay().hide(),
            e = this.getConf(),
            a = this.getTrigger();
        c = c.data("img");
        var d = {
            top: e.start.top,
            left: e.start.left,
            width: 0
        };
        a && l.extend(d, f(a));
        e.fixed && c.css({
            position: "absolute"
        }).animate({
            top: "+=" + j.scrollTop(),
            left: "+=" + j.scrollLeft()
        }, 0);
        c.animate(d, e.closeSpeed, b)
    }
    h.addEffect("apple", i, k)
})(jQuery);
(function (b) {
    function k() {
        if (b.browser.msie) {
            var a = b(document).height(),
                d = b(window).height();
            return [window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, a - d < 20 ? d : a]
        }
        return [b(document).width(), b(document).height()]
    }
    function h(a) {
        if (a) {
            return a.call(b.mask)
        }
    }
    b.tools = b.tools || {
        version: "1.2.5"
    };
    var l;
    l = b.tools.expose = {
        conf: {
            maskId: "exposeMask",
            loadSpeed: "slow",
            closeSpeed: "fast",
            closeOnClick: true,
            closeOnEsc: true,
            zIndex: 9998,
            opacity: 0.8,
            startOpacity: 0,
            color: "#fff",
            onLoad: null,
            onClose: null
        }
    };
    var c, i, e, g, j;
    b.mask = {
        load: function (f, d) {
            if (e) {
                return this
            }
            if (typeof f == "string") {
                f = {
                    color: f
                }
            }
            f = f || g;
            g = f = b.extend(b.extend({}, l.conf), f);
            c = b("#" + f.maskId);
            if (!c.length) {
                c = b("<div/>").attr("id", f.maskId);
                b("body").append(c)
            }
            var a = k();
            c.css({
                position: "absolute",
                top: 0,
                left: 0,
                width: a[0],
                height: a[1],
                display: "none",
                opacity: f.startOpacity,
                zIndex: f.zIndex
            });
            f.color && c.css("backgroundColor", f.color);
            if (h(f.onBeforeLoad) === false) {
                return this
            }
            f.closeOnEsc && b(document).bind("keydown.mask", function (m) {
                m.keyCode == 27 && b.mask.close(m)
            });
            f.closeOnClick && c.bind("click.mask", function (m) {
                b.mask.close(m)
            });
            b(window).bind("resize.mask", function () {
                b.mask.fit()
            });
            if (d && d.length) {
                j = d.eq(0).css("zIndex");
                b.each(d, function () {
                    var m = b(this);
                    /relative|absolute|fixed/i.test(m.css("position")) || m.css("position", "relative")
                });
                i = d.css({
                    zIndex: Math.max(f.zIndex + 1, j == "auto" ? 0 : j)
                })
            }
            c.css({
                display: "block"
            }).fadeTo(f.loadSpeed, f.opacity, function () {
                b.mask.fit();
                h(f.onLoad);
                e = "full"
            });
            e = true;
            return this
        },
        close: function () {
            if (e) {
                if (h(g.onBeforeClose) === false) {
                    return this
                }
                c.fadeOut(g.closeSpeed, function () {
                    h(g.onClose);
                    i && i.css({
                        zIndex: j
                    });
                    e = false
                });
                b(document).unbind("keydown.mask");
                c.unbind("click.mask");
                b(window).unbind("resize.mask")
            }
            return this
        },
        fit: function () {
            if (e) {
                var a = k();
                c.css({
                    width: a[0],
                    height: a[1]
                })
            }
        },
        getMask: function () {
            return c
        },
        isLoaded: function (a) {
            return a ? e == "full" : e
        },
        getConf: function () {
            return g
        },
        getExposed: function () {
            return i
        }
    };
    b.fn.mask = function (a) {
        b.mask.load(a);
        return this
    };
    b.fn.expose = function (a) {
        b.mask.load(a, this);
        return this
    }
})(jQuery);
(function (b) {
    b.prettyLoader = {
        version: "1.0.1"
    };
    b.prettyLoader = function (a) {
        a = jQuery.extend({
            animation_speed: "fast",
            bind_to_ajax: true,
            delay: false,
            loader: "/images/prettyLoader/ajax-loader.gif",
            offset_top: 13,
            offset_left: 10
        }, a);
        scrollPos = d();
        imgLoader = new Image();
        imgLoader.onerror = function () {
            //alert("Preloader image cannot be loaded. Make sure the path is correct in the settings and that the image is reachable.")
        };
        imgLoader.src = a.loader;
        if (a.bind_to_ajax) {
            jQuery(document).ajaxStart(function () {
                b.prettyLoader.show()
            }).ajaxStop(function () {
                b.prettyLoader.hide()
            })
        }
        b.prettyLoader.positionLoader = function (h) {
            h = h ? h : window.event;
            var c, e;
            c = (h.clientX) ? h.clientX : c;
            e = (h.clientY) ? h.clientY : e;
            left_pos = c + a.offset_left + scrollPos.scrollLeft;
            top_pos = e + a.offset_top + scrollPos.scrollTop;
            b(".prettyLoader").css({
                top: top_pos,
                left: left_pos
            })
        };
        b.prettyLoader.show = function (c) {
            if (b(".prettyLoader").size() > 0) {
                return
            }
            scrollPos = d();
            b("<div></div>").addClass("prettyLoader").addClass("prettyLoader_" + a.theme).appendTo("body").hide();
            if (b.browser.msie && b.browser.version == 6) {
                b(".prettyLoader").addClass("pl_ie6")
            }
            b("<img />").attr("src", a.loader).appendTo(".prettyLoader");
            b(".prettyLoader").fadeIn(a.animation_speed);
            b(document).bind("click", b.prettyLoader.positionLoader);
            b(document).bind("mousemove", b.prettyLoader.positionLoader);
            b(window).scroll(function () {
                scrollPos = d();
                b(document).triggerHandler("mousemove")
            });
            c = (c) ? c : a.delay;
            if (c) {
                setTimeout(function () {
                    b.prettyLoader.hide()
                }, c)
            }
        };
        b.prettyLoader.hide = function () {
            b(document).unbind("click", b.prettyLoader.positionLoader);
            b(document).unbind("mousemove", b.prettyLoader.positionLoader);
            b(window).unbind("scroll");
            b(".prettyLoader").fadeOut(a.animation_speed, function () {
                b(this).remove()
            })
        };

        function d() {
            if (self.pageYOffset) {
                return {
                    scrollTop: self.pageYOffset,
                    scrollLeft: self.pageXOffset
                }
            } else {
                if (document.documentElement && document.documentElement.scrollTop) {
                    return {
                        scrollTop: document.documentElement.scrollTop,
                        scrollLeft: document.documentElement.scrollLeft
                    }
                } else {
                    if (document.body) {
                        return {
                            scrollTop: document.body.scrollTop,
                            scrollLeft: document.body.scrollLeft
                        }
                    }
                }
            }
        }
        return this
    }
})(jQuery);
jQuery.fn.textlimit = function (i, k, n) {
    var l = n || 15;
    var o = n != -1;
    var m = true;
    var p = this[0];
    j();

    function j() {
        jQuery(i).text(k - p.value.length)
    }
    this.keypress(function (a) {
        if (this.value.length >= k && a.charCode != "0") {
            a.preventDefault()
        }
    }).keyup(function (b) {
        j();
        if (this.value.length >= k && m) {
            if (o) {
                p.value = p.value.substr(0, k + 100);
                var a = setInterval(function () {
                    if (p.value.length <= k) {
                        a = clearInterval(a);
                        j()
                    } else {
                        p.value = p.value.substring(0, p.value.length - 1);
                        jQuery(i).text("trimming...  " + (k - p.value.length))
                    }
                }, l)
            } else {
                this.value = p.value.substr(0, k)
            }
        }
    })
};
(function (G) {
    var P, b, e, J, p, L, h, l, m, S = 0,
        I = {}, T = [],
        Q = 0,
        H = {}, M = [],
        q = null,
        U = new Image,
        u = /\.(jpg|gif|png|bmp|jpeg)$/i,
        k = /[^\.]\.(swf)\s*$/i,
        v, x = 1,
        N, O, K = false,
        g = G.extend(G("<div/>")[0], {
            prop: 0
        }),
        c = 0,
        D = !G.support.opacity && !window.XMLHttpRequest,
        y = function () {
            b.hide();
            U.onerror = U.onload = null;
            q && q.abort();
            P.empty()
        }, E = function () {
            G.fancybox('<p id="fancybox_error">The requested content cannot be loaded.<br />Please try again later.</p>', {
                scrolling: "no",
                padding: 20,
                transitionIn: "none",
                transitionOut: "none"
            })
        }, z = function () {
            return [G(window).width(), G(window).height(), G(document).scrollLeft(), G(document).scrollTop()]
        }, V = function () {
            var w = z(),
                d = {}, o = H.margin,
                f = H.autoScale,
                t = (20 + o) * 2,
                a = (20 + o) * 2,
                r = H.padding * 2;
            if (H.width.toString().indexOf("%") > -1) {
                d.width = w[0] * parseFloat(H.width) / 100 - 40;
                f = false
            } else {
                d.width = H.width + r
            }
            if (H.height.toString().indexOf("%") > -1) {
                d.height = w[1] * parseFloat(H.height) / 100 - 40;
                f = false
            } else {
                d.height = H.height + r
            }
            if (f && (d.width > w[0] - t || d.height > w[1] - a)) {
                if (I.type == "image" || I.type == "swf") {
                    t += r;
                    a += r;
                    f = Math.min(Math.min(w[0] - t, H.width) / H.width, Math.min(w[1] - a, H.height) / H.height);
                    d.width = Math.round(f * (d.width - r)) + r;
                    d.height = Math.round(f * (d.height - r)) + r
                } else {
                    d.width = Math.min(d.width, w[0] - t);
                    d.height = Math.min(d.height, w[1] - a)
                }
            }
            d.top = w[3] + (w[1] - (d.height + 40)) * 0.5;
            d.left = w[2] + (w[0] - (d.width + 40)) * 0.5;
            if (H.autoScale === false) {
                d.top = Math.max(w[3] + o, d.top);
                d.left = Math.max(w[2] + o, d.left)
            }
            return d
        }, W = function (a) {
            if (a && a.length) {
                switch (H.titlePosition) {
                case "inside":
                    return a;
                case "over":
                    return '<span id="fancybox-title-over">' + a + "</span>";
                default:
                    return '<span id="fancybox-title-wrap"><span id="fancybox-title-left"></span><span id="fancybox-title-main">' + a + '</span><span id="fancybox-title-right"></span></span>'
                }
            }
            return false
        }, X = function () {
            var a = H.title,
                d = O.width - H.padding * 2,
                f = "fancybox-title-" + H.titlePosition;
            G("#fancybox-title").remove();
            c = 0;
            if (H.titleShow !== false) {
                a = G.isFunction(H.titleFormat) ? H.titleFormat(a, M, Q, H) : W(a);
                if (!(!a || a === "")) {
                    G('<div id="fancybox-title" class="' + f + '" />').css({
                        width: d,
                        paddingLeft: H.padding,
                        paddingRight: H.padding
                    }).html(a).appendTo("body");
                    switch (H.titlePosition) {
                    case "inside":
                        c = G("#fancybox-title").outerHeight(true) - H.padding;
                        O.height += c;
                        break;
                    case "over":
                        G("#fancybox-title").css("bottom", H.padding);
                        break;
                    default:
                        G("#fancybox-title").css("bottom", G("#fancybox-title").outerHeight(true) * -1);
                        break
                    }
                    G("#fancybox-title").appendTo(p).hide()
                }
            }
        }, Y = function () {
            G(document).unbind("keydown.fb").bind("keydown.fb", function (a) {
                if (a.keyCode == 27 && H.enableEscapeButton) {
                    a.preventDefault();
                    G.fancybox.close()
                } else {
                    if (a.keyCode == 37) {
                        a.preventDefault();
                        G.fancybox.prev()
                    } else {
                        if (a.keyCode == 39) {
                            a.preventDefault();
                            G.fancybox.next()
                        }
                    }
                }
            });
            if (G.fn.mousewheel) {
                J.unbind("mousewheel.fb");
                M.length > 1 && J.bind("mousewheel.fb", function (a, d) {
                    a.preventDefault();
                    K || d === 0 || (d > 0 ? G.fancybox.prev() : G.fancybox.next())
                })
            }
            if (H.showNavArrows) {
                if (H.cyclic && M.length > 1 || Q !== 0) {
                    l.show()
                }
                if (H.cyclic && M.length > 1 || Q != M.length - 1) {
                    m.show()
                }
            }
        }, Z = function () {
            var a, d;
            if (M.length - 1 > Q) {
                a = M[Q + 1].href;
                if (typeof a !== "undefined" && a.match(u)) {
                    d = new Image;
                    d.src = a
                }
            }
            if (Q > 0) {
                a = M[Q - 1].href;
                if (typeof a !== "undefined" && a.match(u)) {
                    d = new Image;
                    d.src = a
                }
            }
        }, A = function () {
            L.css("overflow", H.scrolling == "auto" ? H.type == "image" || H.type == "iframe" || H.type == "swf" ? "hidden" : "auto" : H.scrolling == "yes" ? "auto" : "visible");
            if (!G.support.opacity) {
                L.get(0).style.removeAttribute("filter");
                J.get(0).style.removeAttribute("filter")
            }
            G("#fancybox-title").show();
            H.hideOnContentClick && L.one("click", G.fancybox.close);
            H.hideOnOverlayClick && e.one("click", G.fancybox.close);
            H.showCloseButton && h.show();
            Y();
            G(window).bind("resize.fb", G.fancybox.center);
            H.centerOnScroll ? G(window).bind("scroll.fb", G.fancybox.center) : G(window).unbind("scroll.fb");
            G.isFunction(H.onComplete) && H.onComplete(M, Q, H);
            K = false;
            Z()
        }, B = function (a) {
            var d = Math.round(N.width + (O.width - N.width) * a),
                o = Math.round(N.height + (O.height - N.height) * a),
                f = Math.round(N.top + (O.top - N.top) * a),
                r = Math.round(N.left + (O.left - N.left) * a);
            J.css({
                width: d + "px",
                height: o + "px",
                top: f + "px",
                left: r + "px"
            });
            d = Math.max(d - H.padding * 2, 0);
            o = Math.max(o - (H.padding * 2 + c * a), 0);
            L.css({
                width: d + "px",
                height: o + "px"
            });
            if (typeof O.opacity !== "undefined") {
                J.css("opacity", a < 0.5 ? 0.5 : a)
            }
        }, aa = function (a) {
            var d = a.offset();
            d.top += parseFloat(a.css("paddingTop")) || 0;
            d.left += parseFloat(a.css("paddingLeft")) || 0;
            d.top += parseFloat(a.css("border-top-width")) || 0;
            d.left += parseFloat(a.css("border-left-width")) || 0;
            d.width = a.width();
            d.height = a.height();
            return d
        }, F = function () {
            var a = I.orig ? G(I.orig) : false,
                d = {};
            if (a && a.length) {
                a = aa(a);
                d = {
                    width: a.width + H.padding * 2,
                    height: a.height + H.padding * 2,
                    top: a.top - H.padding - 20,
                    left: a.left - H.padding - 20
                }
            } else {
                a = z();
                d = {
                    width: 1,
                    height: 1,
                    top: a[3] + a[1] * 0.5,
                    left: a[2] + a[0] * 0.5
                }
            }
            return d
        }, C = function () {
            b.hide();
            if (J.is(":visible") && G.isFunction(H.onCleanup)) {
                if (H.onCleanup(M, Q, H) === false) {
                    G.event.trigger("fancybox-cancel");
                    K = false;
                    return
                }
            }
            M = T;
            Q = S;
            H = I;
            L.get(0).scrollTop = 0;
            L.get(0).scrollLeft = 0;
            if (H.overlayShow) {
                D && G("select:not(#fancybox-tmp select)").filter(function () {
                    return this.style.visibility !== "hidden"
                }).css({
                    visibility: "hidden"
                }).one("fancybox-cleanup", function () {
                    this.style.visibility = "inherit"
                });
                e.css({
                    "background-color": H.overlayColor,
                    opacity: H.overlayOpacity
                }).unbind().show()
            }
            O = V();
            X();
            if (J.is(":visible")) {
                G(h.add(l).add(m)).hide();
                var a = J.position(),
                    d;
                N = {
                    top: a.top,
                    left: a.left,
                    width: J.width(),
                    height: J.height()
                };
                d = N.width == O.width && N.height == O.height;
                L.fadeOut(H.changeFade, function () {
                    var f = function () {
                        L.html(P.contents()).fadeIn(H.changeFade, A)
                    };
                    G.event.trigger("fancybox-change");
                    L.empty().css("overflow", "hidden");
                    if (d) {
                        L.css({
                            top: H.padding,
                            left: H.padding,
                            width: Math.max(O.width - H.padding * 2, 1),
                            height: Math.max(O.height - H.padding * 2 - c, 1)
                        });
                        f()
                    } else {
                        L.css({
                            top: H.padding,
                            left: H.padding,
                            width: Math.max(N.width - H.padding * 2, 1),
                            height: Math.max(N.height - H.padding * 2, 1)
                        });
                        g.prop = 0;
                        G(g).animate({
                            prop: 1
                        }, {
                            duration: H.changeSpeed,
                            easing: H.easingChange,
                            step: B,
                            complete: f
                        })
                    }
                })
            } else {
                J.css("opacity", 1);
                if (H.transitionIn == "elastic") {
                    N = F();
                    L.css({
                        top: H.padding,
                        left: H.padding,
                        width: Math.max(N.width - H.padding * 2, 1),
                        height: Math.max(N.height - H.padding * 2, 1)
                    }).html(P.contents());
                    J.css(N).show();
                    if (H.opacity) {
                        O.opacity = 0
                    }
                    g.prop = 0;
                    G(g).animate({
                        prop: 1
                    }, {
                        duration: H.speedIn,
                        easing: H.easingIn,
                        step: B,
                        complete: A
                    })
                } else {
                    L.css({
                        top: H.padding,
                        left: H.padding,
                        width: Math.max(O.width - H.padding * 2, 1),
                        height: Math.max(O.height - H.padding * 2 - c, 1)
                    }).html(P.contents());
                    J.css(O).fadeIn(H.transitionIn == "none" ? 0 : H.speedIn, A)
                }
            }
        }, s = function () {
            P.width(I.width);
            P.height(I.height);
            if (I.width == "auto") {
                I.width = P.width()
            }
            if (I.height == "auto") {
                I.height = P.height()
            }
            C()
        }, ab = function () {
            K = true;
            I.width = U.width;
            I.height = U.height;
            G("<img />").attr({
                id: "fancybox-img",
                src: U.src,
                alt: I.title
            }).appendTo(P);
            C()
        }, n = function () {
            y();
            var t = T[S],
                d, o, f, r, a;
            I = G.extend({}, G.fn.fancybox.defaults, typeof G(t).data("fancybox") == "undefined" ? I : G(t).data("fancybox"));
            f = t.title || G(t).title || I.title || "";
            if (t.nodeName && !I.orig) {
                I.orig = G(t).children("img:first").length ? G(t).children("img:first") : G(t)
            }
            if (f === "" && I.orig) {
                f = I.orig.attr("alt")
            }
            d = t.nodeName && /^(?:javascript|#)/i.test(t.href) ? I.href || null : I.href || t.href || null;
            if (I.type) {
                o = I.type;
                if (!d) {
                    d = I.content
                }
            } else {
                if (I.content) {
                    o = "html"
                } else {
                    if (d) {
                        if (d.match(u)) {
                            o = "image"
                        } else {
                            if (d.match(k)) {
                                o = "swf"
                            } else {
                                if (G(t).hasClass("iframe")) {
                                    o = "iframe"
                                } else {
                                    if (d.match(/#/)) {
                                        t = d.substr(d.indexOf("#"));
                                        o = G(t).length > 0 ? "inline" : "ajax"
                                    } else {
                                        o = "ajax"
                                    }
                                }
                            }
                        }
                    } else {
                        o = "inline"
                    }
                }
            }
            I.type = o;
            I.href = d;
            I.title = f;
            if (I.autoDimensions && I.type !== "iframe" && I.type !== "swf") {
                I.width = "auto";
                I.height = "auto"
            }
            if (I.modal) {
                I.overlayShow = true;
                I.hideOnOverlayClick = false;
                I.hideOnContentClick = false;
                I.enableEscapeButton = false;
                I.showCloseButton = false
            }
            if (G.isFunction(I.onStart)) {
                if (I.onStart(T, S, I) === false) {
                    K = false;
                    return
                }
            }
            P.css("padding", 20 + I.padding + I.margin);
            G(".fancybox-inline-tmp").unbind("fancybox-cancel").bind("fancybox-change", function () {
                G(this).replaceWith(L.children())
            });
            switch (o) {
            case "html":
                P.html(I.content);
                s();
                break;
            case "inline":
                G('<div class="fancybox-inline-tmp" />').hide().insertBefore(G(t)).bind("fancybox-cleanup", function () {
                    G(this).replaceWith(L.children())
                }).bind("fancybox-cancel", function () {
                    G(this).replaceWith(P.children())
                });
                G(t).appendTo(P);
                s();
                break;
            case "image":
                K = false;
                G.fancybox.showActivity();
                U = new Image;
                U.onerror = function () {
                    E()
                };
                U.onload = function () {
                    U.onerror = null;
                    U.onload = null;
                    ab()
                };
                U.src = d;
                break;
            case "swf":
                r = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="' + I.width + '" height="' + I.height + '"><param name="movie" value="' + d + '"></param>';
                a = "";
                G.each(I.swf, function (w, R) {
                    r += '<param name="' + w + '" value="' + R + '"></param>';
                    a += " " + w + '="' + R + '"'
                });
                r += '<embed src="' + d + '" type="application/x-shockwave-flash" width="' + I.width + '" height="' + I.height + '"' + a + "></embed></object>";
                P.html(r);
                s();
                break;
            case "ajax":
                t = d.split("#", 2);
                o = I.ajax.data || {};
                if (t.length > 1) {
                    d = t[0];
                    if (typeof o == "string") {
                        o += "&selector=" + t[1]
                    } else {
                        o.selector = t[1]
                    }
                }
                K = false;
                G.fancybox.showActivity();
                q = G.ajax(G.extend(I.ajax, {
                    url: d,
                    data: o,
                    error: E,
                    success: function (w) {
                        if (q.status == 200) {
                            P.html(w);
                            s()
                        }
                    }
                }));
                break;
            case "iframe":
                G('<iframe id="fancybox-frame" name="fancybox-frame' + (new Date).getTime() + '" frameborder="0" hspace="0" scrolling="' + I.scrolling + '" src="' + I.href + '"></iframe>').appendTo(P);
                C();
                break
            }
        }, i = function () {
            if (b.is(":visible")) {
                G("div", b).css("top", x * -40 + "px");
                x = (x + 1) % 12
            } else {
                clearInterval(v)
            }
        }, j = function () {
            if (!G("#fancybox-wrap").length) {
                G("body").append(P = G('<div id="fancybox-tmp"></div>'), b = G('<div id="fancybox-loading"><div></div></div>'), e = G('<div id="fancybox-overlay"></div>'), J = G('<div id="fancybox-wrap"></div>'));
                if (!G.support.opacity) {
                    J.addClass("fancybox-ie");
                    b.addClass("fancybox-ie")
                }
                p = G('<div id="fancybox-outer"></div>').append('<div class="fancy-bg" id="fancy-bg-n"></div><div class="fancy-bg" id="fancy-bg-ne"></div><div class="fancy-bg" id="fancy-bg-e"></div><div class="fancy-bg" id="fancy-bg-se"></div><div class="fancy-bg" id="fancy-bg-s"></div><div class="fancy-bg" id="fancy-bg-sw"></div><div class="fancy-bg" id="fancy-bg-w"></div><div class="fancy-bg" id="fancy-bg-nw"></div>').appendTo(J);
                p.append(L = G('<div id="fancybox-inner"></div>'), h = G('<a id="fancybox-close"></a>'), l = G('<a href="javascript:;" id="fancybox-left"><span class="fancy-ico" id="fancybox-left-ico"></span></a>'), m = G('<a href="javascript:;" id="fancybox-right"><span class="fancy-ico" id="fancybox-right-ico"></span></a>'));
                h.click(G.fancybox.close);
                b.click(G.fancybox.cancel);
                l.click(function (a) {
                    a.preventDefault();
                    G.fancybox.prev()
                });
                m.click(function (a) {
                    a.preventDefault();
                    G.fancybox.next()
                });
                if (D) {
                    e.get(0).style.setExpression("height", "document.body.scrollHeight > document.body.offsetHeight ? document.body.scrollHeight : document.body.offsetHeight + 'px'");
                    b.get(0).style.setExpression("top", "(-20 + (document.documentElement.clientHeight ? document.documentElement.clientHeight/2 : document.body.clientHeight/2 ) + ( ignoreMe = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop )) + 'px'");
                    p.prepend('<iframe id="fancybox-hide-sel-frame" src="javascript:\'\';" scrolling="no" frameborder="0" ></iframe>')
                }
            }
        };
    G.fn.fancybox = function (a) {
        G(this).data("fancybox", G.extend({}, a, G.metadata ? G(this).metadata() : {})).unbind("click.fb").bind("click.fb", function (d) {
            d.preventDefault();
            if (!K) {
                K = true;
                G(this).blur();
                T = [];
                S = 0;
                d = G(this).attr("rel") || "";
                if (!d || d == "" || d === "nofollow") {
                    T.push(this)
                } else {
                    T = G("a[rel=" + d + "], area[rel=" + d + "]");
                    S = T.index(this)
                }
                n();
                return false
            }
        });
        return this
    };
    G.fancybox = function (a, d) {
        if (!K) {
            K = true;
            d = typeof d !== "undefined" ? d : {};
            T = [];
            S = d.index || 0;
            if (G.isArray(a)) {
                for (var o = 0, f = a.length; o < f; o++) {
                    if (typeof a[o] == "object") {
                        G(a[o]).data("fancybox", G.extend({}, d, a[o]))
                    } else {
                        a[o] = G({}).data("fancybox", G.extend({
                            content: a[o]
                        }, d))
                    }
                }
                T = jQuery.merge(T, a)
            } else {
                if (typeof a == "object") {
                    G(a).data("fancybox", G.extend({}, d, a))
                } else {
                    a = G({}).data("fancybox", G.extend({
                        content: a
                    }, d))
                }
                T.push(a)
            }
            if (S > T.length || S < 0) {
                S = 0
            }
            n()
        }
    };
    G.fancybox.showActivity = function () {
        clearInterval(v);
        b.show();
        v = setInterval(i, 66)
    };
    G.fancybox.hideActivity = function () {
        b.hide()
    };
    G.fancybox.next = function () {
        return G.fancybox.pos(Q + 1)
    };
    G.fancybox.prev = function () {
        return G.fancybox.pos(Q - 1)
    };
    G.fancybox.pos = function (a) {
        if (!K) {
            a = parseInt(a, 10);
            if (a > -1 && M.length > a) {
                S = a;
                n()
            }
            if (H.cyclic && M.length > 1 && a < 0) {
                S = M.length - 1;
                n()
            }
            if (H.cyclic && M.length > 1 && a >= M.length) {
                S = 0;
                n()
            }
        }
    };
    G.fancybox.cancel = function () {
        if (!K) {
            K = true;
            G.event.trigger("fancybox-cancel");
            y();
            I && G.isFunction(I.onCancel) && I.onCancel(T, S, I);
            K = false
        }
    };
    G.fancybox.close = function () {
        function a() {
            e.fadeOut("fast");
            J.hide();
            G.event.trigger("fancybox-cleanup");
            L.empty();
            G.isFunction(H.onClosed) && H.onClosed(M, Q, H);
            M = I = [];
            Q = S = 0;
            H = I = {};
            K = false
        }
        if (!(K || J.is(":hidden"))) {
            K = true;
            if (H && G.isFunction(H.onCleanup)) {
                if (H.onCleanup(M, Q, H) === false) {
                    K = false;
                    return
                }
            }
            y();
            G(h.add(l).add(m)).hide();
            G("#fancybox-title").remove();
            J.add(L).add(e).unbind();
            G(window).unbind("resize.fb scroll.fb");
            G(document).unbind("keydown.fb");
            L.css("overflow", "hidden");
            if (H.transitionOut == "elastic") {
                N = F();
                var d = J.position();
                O = {
                    top: d.top,
                    left: d.left,
                    width: J.width(),
                    height: J.height()
                };
                if (H.opacity) {
                    O.opacity = 1
                }
                g.prop = 1;
                G(g).animate({
                    prop: 0
                }, {
                    duration: H.speedOut,
                    easing: H.easingOut,
                    step: B,
                    complete: a
                })
            } else {
                J.fadeOut(H.transitionOut == "none" ? 0 : H.speedOut, a)
            }
        }
    };
    G.fancybox.resize = function () {
        var a, d;
        if (!(K || J.is(":hidden"))) {
            K = true;
            a = L.wrapInner("<div style='overflow:auto'></div>").children();
            d = a.height();
            J.css({
                height: d + H.padding * 2 + c
            });
            L.css({
                height: d
            });
            a.replaceWith(a.children());
            G.fancybox.center()
        }
    };
    G.fancybox.center = function () {
        K = true;
        var a = z(),
            d = H.margin,
            f = {};
        f.top = a[3] + (a[1] - (J.height() - c + 40)) * 0.5;
        f.left = a[2] + (a[0] - (J.width() + 40)) * 0.5;
        f.top = Math.max(a[3] + d, f.top);
        f.left = Math.max(a[2] + d, f.left);
        J.css(f);
        K = false
    };
    G.fn.fancybox.defaults = {
        padding: 10,
        margin: 20,
        opacity: false,
        modal: false,
        cyclic: false,
        scrolling: "auto",
        width: 560,
        height: 340,
        autoScale: true,
        autoDimensions: true,
        centerOnScroll: false,
        ajax: {},
        swf: {
            wmode: "transparent"
        },
        hideOnOverlayClick: true,
        hideOnContentClick: false,
        overlayShow: true,
        overlayOpacity: 0.3,
        overlayColor: "#666",
        titleShow: true,
        titlePosition: "outside",
        titleFormat: null,
        transitionIn: "fade",
        transitionOut: "fade",
        speedIn: 300,
        speedOut: 300,
        changeSpeed: 300,
        changeFade: "fast",
        easingIn: "swing",
        easingOut: "swing",
        showCloseButton: true,
        showNavArrows: true,
        enableEscapeButton: true,
        onStart: null,
        onCancel: null,
        onComplete: null,
        onCleanup: null,
        onClosed: null
    };
    G(document).ready(function () {
        j()
    })
})(jQuery);
(function (b) {
    b.createModalBackground = function () {
        var a = b('<div class="modal_background hide" style="height:' + b(document).height() + 'px;"></div>');
        b("body").append(a);
        a.fadeIn("fast");
        return a
    }
}(jQuery));
(function (b) {
    b.fn.highlight = function (v) {
        function s(e, g, d, c, f) {
            x(g);
            if (f !== null) {
                x(f)
            }
            t(e, d);
            b("body").unbind("click");
            clearTimeout(c)
        }
        function y() {
            s(this, z, p, a, v.messageElement)
        }
        function x(c) {
            c.fadeOut("fast", function () {
                b(this).remove()
            })
        }
        function o(c) {
            var d = parseInt(c.css("z-index"), 10) + 1;
            c.wrap('<div id="highlight-iefix-parent" style="position:relative;z-index:' + d + '"></div>')
        }
        function w(c) {
            c.unwrap()
        }
        function q(d, c) {
            var e = parseInt(c.css("z-index"), 10) + 1;
            current_style = d.attr("style") || "";
            d.css({
                position: "absolute",
                "z-index": e
            });
            o(d);
            return current_style
        }
        function t(d, c) {
            d.attr("style", c)
        }
        function r(f, e, g) {
            var c = parseInt(e.offset().top, 10) + g,
                d = parseInt(e.offset().left, 10) - g - f.width();
            f.css({
                "z-index": e.css("z-index"),
                position: "absolute",
                left: d + "px",
                top: c + "px"
            });
            f.fadeIn()
        }
        function u(d) {
            if (typeof d !== "object") {
                d = {}
            }
            var c = {
                timeout: 10000,
                messageElement: null,
                pixelMargin: 10
            };
            return b.extend(c, d)
        }
        v = u(v);
        if (this.length) {
            var p = null,
                a = null,
                z = b.createModalBackground();
            p = q(this, z);
            if (v.messageElement !== null) {
                r(v.messageElement, this, v.pixelMargin)
            }
            a = setTimeout(b.proxy(y, this), v.timeout);
            b("body").click(b.proxy(y, this))
        } else {
            v.messageElement.remove()
        }
        return this
    }
})(jQuery);
(function (b) {
    b.removeAccents = function (e, f) {
        if (e === undefined || e === "") {
            return ""
        }
        var a = b.extend({
            replaceRules: {
                a: /à|á|ã|â|ä/g,
                e: /è|é|ê|ẽ|ë/g,
                i: /ì|í|î|ï/g,
                o: /ò|ó|ô|õ|ö/g,
                u: /ù|ú|ũ|û|ü/g,
                c: /ç/g,
                n: /ñ/g,
                A: /À|Á|Ã|Â|Ä/g,
                E: /È|É|Ê|Ẽ|Ë/g,
                I: /Ì|Í|Î|Ï/g,
                O: /Ò|Ó|Ô|Õ|Ö/g,
                U: /Ù|Ú|Ũ|Û|Ü/g,
                C: /Ç/g,
                N: /Ñ/g
            }
        }, f || {});
        if (e.length > 0) {
            b.each(a.replaceRules, function (c, d) {
                e = e.replace(d, c)
            })
        }
        return e
    }
})(jQuery);
var autoSGSGeocode = Class.create({
    initialize: function (p, l, j, o, m, i, n, k) {
        if (typeof p == "string" && p != "") {
            this.input = $(p)
        } else {
            if (typeof p == "object" && p != "") {
                this.input = p
            } else {
                alert("autoSGSGeocode: input de entrada não está definido.");
                return false
            }
        }
        switch (l) {
        case "city", "2", 2:
            this.mode = 2;
            break;
        default:
            this.mode = 1
        }
        if (typeof j == "string" && j != "") {
            this.container = $(j)
        } else {
            if (typeof j == "object" && j != "") {
                this.container = j
            }
        }
        if (typeof this.container != "undefined" && this.container != "") {
            this.open = false;
            this.container.innerHTML = "";
            $(this.container).hide();
            if (this.input.attachEvent) {
                this.input.attachEvent("onkeydown", this.onKeyDown.bind(this))
            } else {
                this.input.onkeydown = this.onKeyDown.bind(this)
            }
        }
        if (typeof o == "number") {
            this.startTime = o
        } else {
            this.startTime = 0.5
        }
        if (typeof m == "number") {
            this.startLength = m
        } else {
            this.startLength = 2
        }
        if (typeof i == "string" && i != "") {
            this.ignoreValue = i
        } else {
            this.ignoreValue = ""
        }
        switch (n) {
        case "2", 2:
            this.requestType = 2;
            if (typeof k == "string" && k != "") {
                this.objname = k
            } else {
                alert("autoSGSGeocode: objname não está definido em modo ajax crossdomain.");
                return false
            }
            break;
        case "3", 3:
            this.requestType = 3;
            break;
        default:
            this.requestType = 1;
            break
        }
        this.urlAdressSGS = URLHOST + "/memorygeocode/request?function=addsugg&v=1";
        this.urlCitySGS = URLHOST + "/memorygeocode/request?function=citysugg&v=1";
        this.urlGeocoding = URLHOST + "/memorygeocode/request?function=geo&v=1";
        this.observer = null;
        this.result = new aptAddress("", "", "", "", "", "", "", "", "", "");
        this.candidates = new Array();
        this.verify = false;
        this.cityInstance = null;
        this.formatedCity = "";
        this.formatedState = "";
        this.formatedValue = "";
        this.formatedNumber = 0;
        this.wishline = 0;
        this.keyNum = 0;
        this.pars = {};
        this.firstStart = true;
        this.defaultCity = "";
        this.defaultState = "";
        this.formatedCountry = "BR";
        this.autoGeocode = false;
        this.autoSelection = true;
        this.autoReplaceNumber = true;
        this.trHeadStyle = {
            backgroundColor: "#ccc",
            fontWeight: "bold"
        };
        this.trOverBackground = "#E8EFFB";
        this.matchColor = "#FFF699"
    },
    start: function (b) {
        if (typeof b == "object" && typeof b != "undefined" && this.firstStart && this.mode == 1) {
            this.cityInstance = b;
            this.firstStart = false
        } else {
            if (this.firstStart && this.mode == 1 && this.defaultCity == "" && this.defaultState == "") {
                alert("autoSGSGeocode: instancia da cidade padrão não está definida.");
                return false
            } else {
                this.firstStart = false
            }
        }
        if (this.observer == null) {
            this.observer = new Form.Element.Observer(this.input, this.startTime, this.sgs.bind(this))
        }
    },
    stop: function () {
        if (this.observer != null) {
            this.observer.stop()
        }
        this.observer = null;
        this.reset(true)
    },
    setValue: function (g, f) {
        this.stop();
        this.result = g;
        switch (this.mode) {
        case 2:
            this.input.value = g.toStrCityState();
            break;
        default:
            var h = g.toStrStreetNum().split(",");
            var i = h[0].removeAccents();
            if (h[1] != undefined) {
                var j = parseInt(h[1])
            } else {
                var j = 0
            }
            if (typeof j != "number" || isNaN(j)) {
                j = 0
            }
            this.input.value = i.trim().toString() + ", " + j;
            break
        }
        if (typeof f != "undefined") {
            this.verify = f
        } else {
            this.verify = true
        }
        this.start()
    },
    reset: function (b) {
        this.result = new aptAddress("", "", "", "", "", "", "", "", "", "");
        this.formatedCity = "";
        this.formatedState = "";
        this.formatedValue = "";
        this.formatedNumber = 0;
        this.candidates = new Array();
        this.verify = false;
        this.pars = {};
        if (b) {
            this.input.value = ""
        }
        if (typeof this.container != "undefined") {
            this.open = false;
            this.container.innerHTML = "";
            $(this.container).hide();
            this.keyNum = 0;
            this.wishline = 0
        }
        if (typeof this.callBackReset != "undefined" && this.callBackReset != "") {
            this.callBackReset()
        }
    },
    sgs: function (d, c) {
        this.reset();
        this.format();
        switch (this.mode) {
        case 2:
            if (c.length > this.startLength && this.result.city.trim().toString() != this.formatedCity.trim().toString() && c.trim().toString().toUpperCase() != this.ignoreValue.trim().toString().toUpperCase()) {
                this.ajaxSGS({
                    cityState: this.formatedCity,
                    country: this.formatedCountry
                }, this.urlCitySGS, this.sgsCityEnd.bind(this))
            }
            break;
        default:
            if (this.formatedCity == "" && this.formatedState == "") {
                if (typeof this.callBackCityAbort != "undefined" && this.callBackCityAbort != "") {
                    this.callBackCityAbort()
                }
            } else {
                if (c.trim().toString().toUpperCase() != this.ignoreValue.trim().toString().toUpperCase() && c.length > this.startLength && (this.result.street != this.formatedValue || this.result.city != this.formatedCity || this.result.state != this.formatedState)) {
                    this.ajaxSGS({
                        street: this.formatedValue,
                        number: this.formatedNumber,
                        city: this.formatedCity,
                        state: this.formatedState,
                        country: this.formatedCountry
                    }, this.urlAdressSGS, this.sgsAddressEnd.bind(this))
                }
            }
            break
        }
    },
    format: function () {
        switch (this.mode) {
        case 2:
            try {
                var i = this.input.value.split(",");
                try {
                    var j = i[0].removeAccents();
                    var m = i[1].removeAccents()
                } catch (l) {
                    try {
                        var j = i[0].removeAccents();
                        var m = this.defaultState
                    } catch (l) {
                        var j = this.defaultCity;
                        var m = this.defaultState
                    }
                }
                if (j.trim() == "") {
                    j = this.defaultCity
                }
                if (m.trim() == "") {
                    m = this.defaultState
                }
                this.formatedCity = j.trim().toString();
                this.formatedState = m.trim().toString()
            } catch (l) {
                this.formatedCity = this.defaultCity;
                this.formatedState = this.defaultState
            }
            break;
        default:
            if (typeof this.cityInstance == "object" && typeof this.cityInstance != "undefined" && this.cityInstance != null) {
                if (typeof this.cityInstance.container != "undefined" && typeof this.cityInstance.container == "object" && this.cityInstance.container != "") {
                    $(this.cityInstance.container).hide()
                }
                if (this.cityInstance.verify) {
                    this.formatedCity = this.cityInstance.result.city;
                    this.formatedState = this.cityInstance.result.state
                } else {
                    this.formatedCity = "";
                    this.formatedState = ""
                }
            } else {
                this.formatedCity = this.defaultCity;
                this.formatedState = this.defaultState
            }
            try {
                var k = this.input.value.split(",");
                try {
                    var n = k[0].removeAccents();
                    var e = parseInt(k[1])
                } catch (l) {
                    try {
                        var n = k[0].removeAccents();
                        var e = 0
                    } catch (l) {
                        var n = "";
                        var e = 0
                    }
                }
                if (typeof e != "number" || isNaN(e)) {
                    e = 0
                }
                this.formatedValue = n;
                this.formatedNumber = e
            } catch (l) {
                this.formatedValue = "";
                this.formatedNumber = 0
            }
            break
        }
    },
    ajaxSGS: function (j, g, i) {
        if (typeof this.callBackStart != "undefined" && this.callBackStart != "") {
            this.callBackStart()
        }
        jq.each(j, function (b, a) {
            j[b] = jq.removeAccents(a)
        });
        switch (this.requestType) {
        case "2", 2:
            aptScript(g + "?" + Object.toQueryString(j) + "&wt=apt&call=" + this.objname);
            break;
        case "3", 3:
            var h = {};
            var f = gadgets.io.encodeValues(j);
            h[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
            h[gadgets.io.RequestParameters.POST_DATA] = f;
            gadgets.io.makeRequest(g, i, h);
            break;
        default:
            if (typeof this.ajaxObj != "undefined") {
                if (this.ajaxObj.transport.readyState != 4) {
                    this.ajaxObj.transport.abort()
                }
            }
            this.ajaxObj = new Ajax.Request(g, {
                method: "get",
                parameters: j,
                onSuccess: i
            });
            break
        }
    },
    sgsAddressEnd: function (response) {
        if (response.responseText) {
            var Holder = eval("(" + response.responseText + ")")
        } else {
            var Holder = response
        }
        if (Holder.length > 0) {
            for (var i = 0; i < Holder.length; i++) {
                this.candidates[i] = new aptAddress(this.formatedCountry, this.formatedState, this.formatedCity, Holder[i].district, Holder[i].name, this.formatedNumber, "", "", Holder[i].streetid, "")
            }
            if (typeof this.callBackChanged != "undefined" && this.callBackChanged != "") {
                this.callBackChanged()
            }
            if (typeof this.container != "undefined" && this.container != "") {
                var table = new aptElement([{
                    tag: "table",
                    style: {
                        width: "100%",
                        border: "0"
                    },
                    childs: [{
                        tag: "tbody",
                        childs: [{
                            tag: "tr",
                            style: this.trHeadStyle,
                            childs: [{
                                tag: "td",
                                width: "60%",
                                innerHTML: "Endere&ccedil;o "
                            }, {
                                tag: "td",
                                width: "10%",
                                innerHTML: "N. "
                            }, {
                                tag: "td",
                                width: "30%",
                                innerHTML: "Bairro "
                            }]
                        }]
                    }]
                }]);
                for (var i = 0; i < this.candidates.length; i++) {
                    var row = new aptElement([{
                        tag: "tr",
                        style: {
                            cursor: "pointer"
                        },
                        childs: [{
                            tag: "td",
                            innerHTML: this.findBackground(this.candidates[i].street)
                        }, {
                            tag: "td",
                            innerHTML: this.candidates[i].num
                        }, {
                            tag: "td",
                            innerHTML: (this.candidates[i].suburb) ? this.candidates[i].suburb : this.candidates[i].county
                        }]
                    }]);
                    Event.observe(row.elements[0], "click", this.onClick.bind(this, i));
                    Event.observe(row.elements[0], "mouseover", this.rollOver.bind(this, i));
                    Event.observe(row.elements[0], "mouseout", this.rollOut.bind(this, i));
                    table.elements[0].childNodes[0].appendChild(row.elements[0])
                }
                this.container.appendChild(table.elements[0]);
                $(this.container).show();
                this.open = true
            }
        } else {
            if (typeof this.callBackNotFound != "undefined" && this.callBackNotFound != "") {
                this.callBackNotFound()
            }
        }
    },
    sgsCityEnd: function (response) {
        if (response.responseText) {
            var Holder = eval("(" + response.responseText + ")")
        } else {
            var Holder = response
        }
        if (Holder.length > 0) {
            for (var i = 0; i < Holder.length; i++) {
                var placeCity = Holder[i].cityState.split(",");
                var city = placeCity[0].removeAccents();
                var state = placeCity[1].removeAccents();
                this.candidates[i] = new aptAddress(this.formatedCountry, state, city)
            }
            if (typeof this.callBackChanged != "undefined" && this.callBackChanged != "") {
                this.callBackChanged()
            }
            if (typeof this.container != "undefined" && this.container != "") {
                var table = new aptElement([{
                    tag: "table",
                    style: {
                        width: "100%",
                        border: "0"
                    },
                    childs: [{
                        tag: "tbody",
                        childs: [{
                            tag: "tr",
                            style: this.trHeadStyle,
                            childs: [{
                                tag: "td",
                                width: "90%",
                                innerHTML: "Cidade"
                            }, {
                                tag: "td",
                                width: "10%",
                                innerHTML: "UF"
                            }]
                        }]
                    }]
                }]);
                for (var i = 0; i < this.candidates.length; i++) {
                    var row = new aptElement([{
                        tag: "tr",
                        style: {
                            cursor: "pointer"
                        },
                        childs: [{
                            tag: "td",
                            innerHTML: this.findBackground(this.candidates[i].city, true)
                        }, {
                            tag: "td",
                            innerHTML: this.candidates[i].state
                        }]
                    }]);
                    Event.observe(row.elements[0], "click", this.onClick.bind(this, i));
                    Event.observe(row.elements[0], "mouseover", this.rollOver.bind(this, i));
                    Event.observe(row.elements[0], "mouseout", this.rollOut.bind(this, i));
                    table.elements[0].childNodes[0].appendChild(row.elements[0])
                }
                $(this.container).appendChild(table.elements[0]);
                $(this.container).show();
                this.open = true
            }
        } else {
            if (typeof this.callBackNotFound != "undefined" && this.callBackNotFound != "") {
                this.callBackNotFound()
            }
        }
    },
    selectCandidate: function (c) {
        switch (this.mode) {
        case 2:
            this.setValue(this.candidates[c]);
            if (typeof this.callBackEnd != "undefined" && this.callBackEnd != "") {
                this.callBackEnd()
            }
            if (this.autoGeocode) {
                this.geocode()
            }
            break;
        default:
            this.setValue(this.candidates[c], false);
            if (typeof this.callBackSelected != "undefined" && this.callBackSelected != "") {
                this.callBackSelected()
            }
            if (this.autoGeocode) {
                this.geocode()
            }
            var d = this.result;
            if (this.autoSelection) {
                this.setSelection(this.input, (d.street.length + 2), (d.street.length + 2 + (d.num + "").length))
            }
            break
        }
    },
    geocode: function () {
        switch (this.mode) {
        case 2:
            this.format();
            this.pars = {
                city: this.formatedCity,
                state: this.formatedState
            };
            this.ajaxSGS(this.pars, this.urlGeocoding, this.geocodeEnd.bind(this));
            if (this.open && this.candidates.length > 0) {
                if (this.wishline != 0) {
                    var e = this.wishline - 1
                } else {
                    var e = 0
                }
                this.selectCandidate(e)
            } else {
                if (typeof this.callBackNotFound != "undefined" && this.callBackNotFound != "") {
                    this.callBackNotFound()
                }
            }
            break;
        default:
            if (this.verify) {
                if (typeof this.callBackEnd != "undefined" && this.callBackEnd != "") {
                    this.callBackEnd()
                }
            }
            try {
                if (typeof this.result.streetid != "undefined") {
                    var h = this.result.streetid
                } else {
                    var h = ""
                }
            } catch (j) {
                var h = ""
            }
            try {
                if (typeof this.result.county != "undefined") {
                    var i = this.result.county
                } else {
                    var i = ""
                }
            } catch (j) {
                var i = ""
            }
            try {
                if (typeof this.result.suburb != "undefined") {
                    var g = this.result.suburb
                } else {
                    var g = ""
                }
            } catch (j) {
                var g = ""
            }
            this.reset();
            this.format();
            if (this.input.value.trim().toString().toUpperCase() == this.ignoreValue.trim().toString().toUpperCase() || this.input.value.trim().toString().toUpperCase() == "CENTRO DA CIDADE, 0") {
                this.formatedValue = "";
                this.formatedNumber = ""
            }
            if (this.formatedCity == "" && this.formatedState == "") {
                if (typeof this.callBackCityAbort != "undefined" && this.callBackCityAbort != "") {
                    this.callBackCityAbort()
                }
            } else {
                this.pars = {
                    street: this.formatedValue,
                    num: this.formatedNumber,
                    city: this.formatedCity,
                    state: this.formatedState,
                    streetid: h,
                    suburb: g,
                    county: i
                };
                this.ajaxSGS(this.pars, this.urlGeocoding, this.geocodeEnd.bind(this))
            }
            break
        }
    },
    geocodeEnd: function (response) {
        if (response.responseText) {
            var Holder = eval("(" + response.responseText + ")")
        } else {
            var Holder = response
        }
        if (Holder.approx == "true") {
            Holder.approx = true
        } else {
            Holder.approx = false
        }
        var error = false;
        if (this.pars.streetid == "") {
            if (this.pars.street == "" && Holder.street == "") {
                Holder.street = "CENTRO DA CIDADE";
                Holder.num = 0;
                Holder.suburb = ""
            } else {
                if (this.pars.street != "" && Holder.street == "") {
                    error = true
                }
            }
        } else {
            Holder.street = this.pars.street;
            Holder.suburb = this.pars.suburb;
            Holder.county = this.pars.county
        }
        if (!error) {
            if (!this.autoReplaceNumber) {
                Holder.num = this.pars.num
            }
            var result = new aptAddress(this.formatedCountry, this.formatedState, this.formatedCity, Holder.suburb, Holder.street, parseInt(Holder.num), "", parseFloat(Holder.y), parseFloat(Holder.x), Holder.streetid.substring(0, 9), Holder.approx);
            result.latitude = parseFloat(Holder.y);
            result.longitude = parseFloat(Holder.x);
            result.lat = parseFloat(Holder.y);
            result.lon = parseFloat(Holder.x);
            result.streetid = Holder.streetid;
            result.county = Holder.county;
            this.setValue(result);
            if (typeof this.callBackEnd != "undefined" && this.callBackEnd != "") {
                this.callBackEnd()
            }
        } else {
            if (typeof this.callBackNotFound != "undefined" && this.callBackNotFound != "") {
                this.callBackNotFound()
            }
        }
    },
    findBackground: function (l, k) {
        var i = this.input.value.toUpperCase();
        i = i.replace(/-/g, "");
        l = l.toUpperCase().toString();
        var m = i.split(" ");
        var n = l.split(" ");
        for (var o = 0; o < n.length; o++) {
            for (var p = 0; p < m.length; p++) {
                if (!parseInt(m[p])) {
                    if (p == 0) {
                        n[o] = n[o].replace(m[p], "<span style='margin:0;display:inline;float:none;background-color:" + this.matchColor + "'>" + m[p].toUpperCase() + "</span>")
                    } else {
                        n[o] = n[o].replace(m[p], "<span style='margin:0;display:inline;float:none;background-color:" + this.matchColor + "'>" + m[p] + "</span>")
                    }
                }
            }
        }
        var j;
        j = n.join(" ");
        return j
    },
    onClick: function (d, c) {
        this.selectCandidate(d)
    },
    rollOver: function (b) {
        if (this.wihcline >= 1) {
            this.container.childNodes[0].childNodes[0].childNodes[this.wishline].style.background = ""
        }
        this.wishline = b + 1;
        this.container.childNodes[0].childNodes[0].childNodes[b + 1].style.background = this.trOverBackground
    },
    rollOut: function (b) {
        this.container.childNodes[0].childNodes[0].childNodes[b + 1].style.background = ""
    },
    onKeyDown: function (h) {
        if (window.event) {
            var g = h.keyCode
        } else {
            if (h.which) {
                var g = h.which
            }
        }
        var f = this.keyNum;
        this.keyNum = g;
        if (g == 13 || (g == 9 && !(f == 16 || f == 17 || f == 18))) {
            switch (this.mode) {
            case 2:
                if (this.open && this.candidates.length > 0) {
                    if (this.wishline != 0) {
                        var e = this.wishline - 1
                    } else {
                        var e = 0
                    }
                    this.selectCandidate(e)
                } else {
                    if (this.verify) {
                        if (typeof this.callBackEnd != "undefined" && this.callBackEnd != "") {
                            this.callBackEnd()
                        }
                    } else {
                        if (typeof this.callBackNotFound != "undefined" && this.callBackNotFound != "") {
                            this.callBackNotFound()
                        }
                    }
                }
                break;
            default:
                this.format();
                if (this.open && this.candidates.length > 0) {
                    if (this.wishline != 0) {
                        var e = this.wishline - 1
                    } else {
                        var e = 0
                    }
                    this.selectCandidate(e)
                } else {
                    if (this.verify) {
                        if (typeof this.callBackEnd != "undefined" && this.callBackEnd != "") {
                            this.callBackEnd()
                        }
                    } else {
                        this.geocode()
                    }
                }
                break
            }
            return false
        } else {
            if (g == 40 && this.candidates.length > 0 && this.open) {
                if (this.wishline < (this.container.childNodes[0].childNodes[0].childNodes.length - 1)) {
                    if (this.wishline >= 1) {
                        this.container.childNodes[0].childNodes[0].childNodes[this.wishline].style.background = ""
                    }
                    this.wishline += 1;
                    this.container.childNodes[0].childNodes[0].childNodes[this.wishline].style.background = this.trOverBackground
                }
                return false
            } else {
                if (g == 38 && this.candidates.length > 0 && this.open) {
                    if (this.wishline > 1) {
                        this.container.childNodes[0].childNodes[0].childNodes[this.wishline].style.background = "";
                        this.wishline -= 1;
                        this.container.childNodes[0].childNodes[0].childNodes[this.wishline].style.background = this.trOverBackground
                    }
                    return false
                }
            }
        }
        if (typeof this.callBackKeyDown != "undefined" && this.callBackKeyDown != "") {
            this.callBackKeyDown(h, g)
        }
    },
    registerListener: function (d, c) {
        switch (c) {
        case "start":
            this.callBackStart = d;
            break;
        case "changed":
            this.callBackChanged = d;
            break;
        case "selected":
            this.callBackSelected = d;
            break;
        case "abortCity":
            this.callBackCityAbort = d;
            break;
        case "notFound":
            this.callBackNotFound = d;
            break;
        case "end":
            this.callBackEnd = d;
            break;
        case "keyDown":
            this.callBackKeyDown = d;
            break;
        case "reset":
            this.callBackReset = d;
            break
        }
    },
    setSelection: function (g, h, e) {
        if (g.setSelectionRange) {
            g.setSelectionRange(h, e)
        } else {
            if (g.createTextRange) {
                var f = g.createTextRange();
                f.moveStart("character", h);
                f.moveEnd("character", - g.value.length + e);
                f.select()
            }
        }
    }
});
(function (b) {
    b.fn.setProfilePhoto = function (g, h) {
        var a = b.extend({
            photoSize: "m"
        }, h || {});
        var f = null;
        if (g === true) {
            switch (a.photoSize) {
            case "s":
                f = pageObj.user.profilePhoto.small || "/apontador_v8/images/accounts/user48.gif";
                break;
            case "b":
                f = pageObj.user.profilePhoto.big || "/apontador_v8/images/accounts/user200.gif";
                break;
            case "m":
                f = pageObj.user.profilePhoto.medium || "/apontador_v8/images/accounts/user64.gif";
                break;
            default:
                f = pageObj.user.profilePhoto.medium || "/apontador_v8/images/accounts/user64.gif";
                break
            }
        } else {
            switch (a.photoSize) {
            case "s":
                f = "/apontador_v8/images/accounts/user48.gif";
                break;
            case "b":
                f = "/apontador_v8/images/accounts/user200.gif";
                break;
            case "m":
                f = "/apontador_v8/images/accounts/user64.gif";
                break;
            default:
                f = "/apontador_v8/images/accounts/user64.gif";
                break
            }
        }
        b(this).fadeOut().attr("src", f).fadeIn()
    };
    b.limit_text = function (f, a, g) {
        var h = false;
        if (!a) {
            a = 10
        }
        if (!g) {
            g = "..."
        }
        if (f) {
            h = f
        }
        if (h) {
            if (h.length > a) {
                h = f.substr(0, a);
                h += g
            }
        }
        return h
    };
    b.format_title = function (h) {
        var a = ["no", "nos", "na", "nas", "do", "dos", "da", "das", "de", "e", "a", "o"];
        h = b.trim(h);
        var i = h.replace(/(\s|\t)+/g, "|").split("|");
        var j = [];
        b(i).each(function (d, c) {
            c = c.toLowerCase();
            if (b.inArray(c, a) === -1) {
                j.push(ucfirst(c))
            } else {
                j.push(c)
            }
        });
        var g = j.join(" ");
        g = ucfirst(g);
        return g
    };
    b.validateMail = function (a) {
        var d = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
        return (d.test(a))
    };
    b.removeAccents = function (e, f) {
        if (e === undefined || e === "") {
            return ""
        }
        var a = b.extend({
            replaceRules: {
                a: /à|á|ã|â|ä/g,
                e: /è|é|ê|ẽ|ë/g,
                i: /ì|í|î|ï/g,
                o: /ò|ó|ô|õ|ö/g,
                u: /ù|ú|ũ|û|ü/g,
                c: /ç/g,
                n: /ñ/g,
                A: /À|Á|Ã|Â|Ä/g,
                E: /È|É|Ê|Ẽ|Ë/g,
                I: /Ì|Í|Î|Ï/g,
                O: /Ò|Ó|Ô|Õ|Ö/g,
                U: /Ù|Ú|Ũ|Û|Ü/g,
                C: /Ç/g,
                N: /Ñ/g
            }
        }, f || {});
        if (e.length > 0) {
            b.each(a.replaceRules, function (c, d) {
                e = e.replace(d, c)
            })
        }
        return e
    };
    b.array_chunk = function (m, k) {
        if (m) {
            for (var a, l = 0, c = -1, n = m.length, i = []; l < n; l++) {
                (a = l % k) ? i[c][a] = m[l] : i[++c] = [m[l]]
            }
            return i
        } else {
            return false
        }
    }
})(jQuery);
(function (b) {
    b.updatePlayerInfo = function (t, r, F) {
        var D = t.user.logged;
        var v = t.user.id;
        var s = F.pointsElm || "";
        var A = F.progressBarElm || "";
        var C = F.currentLevelElm || "";
        var x = F.nextLevelElm || "";
        var y = F.currentLevelNameElm || "";
        var E = F.nextLevelNameElm || "";
        var B = function (c) {
            return "sprite_ico_" + c.replace(/\s/g, "_").toLowerCase()
        };
        var z = function (c) {
            return "sprite_ico_" + c.replace(/\s/g, "_").toLowerCase() + "_off"
        };
        var a = function (c, d) {
            if (c && d) {
                currLevelName = c.name;
                nextLevelName = d.name;
                currLevelClass = B(currLevelName);
                nextLevelClass = z(nextLevelName);
                b(y).html("<strong>" + currLevelName + "</strong>");
                b(E).html("Com " + d.startPoints + " pontos você sobe de nível para <strong>" + nextLevelName + "</strong>");
                b(C).addClass(currLevelClass).attr("title", currLevelName);
                b(x).addClass(nextLevelClass).attr("title", nextLevelName)
            }
        };
        var w = function (e, c, d) {
            var f = 0;
            if (c && d) {
                if (c.startPoints === d.startPoints) {
                    f = 100
                } else {
                    f = ((e - c.startPoints) / (d.startPoints - c.startPoints)) * 100
                }
            }
            b(A).css("width", f + "%")
        };
        var u = function (d) {
            var c = d || 0;
            b(s).fadeOut().html(c).fadeIn()
        };
        if (D === true) {
            u(r.pointsAll);
            w(r.pointsAll, r.level, r.nextLevel);
            a(r.level, r.nextLevel)
        }
    }
}(jQuery));
(function (b) {
    b.aptAutocomplete = function (o, n, k) {
        var p = {
            urlGeocode: "/memorygeocode/request?function=geo&wt=aptjson&v=1",
            urlCityState: "/memorygeocode/request?function=citysugg&wt=aptjson&v=1",
            urlAddress: "/memorygeocode/request?function=addsugg&wt=aptjson&v=1",
            fieldsToFill: false,
            callback: false,
            executeCityOnStart: false,
            executeAddressOnStart: false,
            fillFieldsOnStart: false
        };
        if (k) {
            b.extend(p, k)
        }
        var q = {
            fieldsToFill: function (c) {
                b.each(p.fieldsToFill, function (e, d) {
                    b(d).val(c[e])
                })
            },
            lockAddressField: function () {
                q.unsetAddressData();
                b(n).attr("readonly", "readonly")
            },
            unlockAddressField: function () {
                q.unsetAddressData();
                b(n).removeAttr("readonly")
            },
            getBasedata: function () {
                return {
                    approx: "",
                    city: "",
                    cityState: "",
                    num: "",
                    state: "",
                    street: "",
                    streetid: "",
                    x: "",
                    y: "",
                    district: ""
                }
            },
            setData: function (d, f, e, c) {
                if (c === undefined) {
                    c = true
                }
                b(d).data(f, e);
                if (p.fieldsToFill && c) {
                    if (d === n) {
                        q.fieldsToFill(q.getAddressData())
                    }
                    if (d === o) {
                        q.fieldsToFill(q.getCityStateData())
                    }
                }
                if (typeof p.callback === "function") {
                    q.callCallback()
                }
            },
            extractCityState: function (d) {
                var f = b.trim(d).toUpperCase();
                var c = f.split(",");
                var g = c[0] ? b.trim(c[0]) : "";
                var e = c[1] ? b.trim(c[1]) : "";
                return {
                    city: g,
                    state: e,
                    cityState: f
                }
            },
            extractAddress: function (d) {
                var g = b.trim(d);
                var c = g.split(",");
                var e = c[0] ? b.trim(c[0]) : "CENTRO DA CIDADE";
                var f = c[1] ? b.trim(c[1]) : "0";
                return {
                    street: e,
                    num: f,
                    address: g
                }
            },
            getCityStateData: function () {
                if (b(o).data("geo")) {
                    return b(o).data("geo")
                } else {
                    return q.getBasedata()
                }
            },
            getAddressData: function () {
                if (b(n).data("geo")) {
                    return b(n).data("geo")
                } else {
                    return q.getBasedata()
                }
            },
            unsetCityStateData: function () {
                b(o).data("geo", null)
            },
            unsetAddressData: function () {
                b(n).data("geo", null)
            },
            clearAddresField: function () {
                b(n).val("")
            },
            clearHiddenFields: function () {
                if (p.fieldsToFill) {
                    b.each(p.fieldsToFill, function (d, c) {
                        b(c).val("")
                    })
                }
            },
            setAddressData: function (f) {
                var d = q.extractAddress(b(n).val());
                var c = q.extractCityState(b(o).val());
                var e = q.getAddressData();
                b.get(p.urlGeocode, {
                    num: d.num,
                    streetid: e.streetid || null
                }, function (g) {
                    data = b.extend({}, c, e, g, {
                        num: d.num,
                        street: e.street
                    });
                    q.setData(n, "geo", data, f)
                })
            },
            setCityStateData: function () {
                if (p.fieldsToFill) {
                    q.fieldsToFill(q.getCityStateData())
                }
            },
            callCallback: function () {
                p.callback(q.getCityStateData(), q.getAddressData())
            }
        };
        var a = {
            getCityState: function () {
                return q.getCityStateData()
            },
            getAddress: function () {
                return q.getAddressData()
            }
        };
        if (!o) {
            b.error("Input de cidade e estado precisa ser informado")
        } else {
            q.lockAddressField();
            if (p.executeCityOnStart) {
                var r = b(o).val();
                var l = q.extractCityState(r);
                b.get(p.urlGeocode, l, function (c) {
                    q.setData(o, "geo", b.extend({}, c, l), p.fillFieldsOnStart);
                    if (r !== "") {
                        q.unlockAddressField()
                    }
                })
            }
            b(o).autocomplete({
                source: function (c, d) {
                    b.ajax({
                        url: p.urlCityState,
                        data: {
                            cityState: c.term.split(",")[0]
                        },
                        success: function (e) {
                            d(b.map(e, function (f) {
                                var g = q.extractCityState(f.cityState);
                                return {
                                    label: f.cityState,
                                    value: f.cityState,
                                    data: g
                                }
                            }))
                        }
                    })
                },
                minLength: 4,
                select: function (d, c) {
                    q.setData(o, "geo", c.item.data);
                    b.get(p.urlGeocode, {
                        city: c.item.data.city,
                        state: c.item.data.state
                    }, function (e) {
                        q.setData(o, "geo", b.extend({}, e, c.item.data))
                    });
                    q.clearAddresField();
                    q.unlockAddressField()
                },
                change: function (d, c) {
                    if (c.item) {
                        q.unlockAddressField()
                    } else {
                        q.lockAddressField();
                        q.clearHiddenFields()
                    }
                },
                open: function () {
                    b(this).removeClass("ui-corner-all").addClass("ui-corner-top")
                },
                close: function () {
                    b(this).removeClass("ui-corner-top").addClass("ui-corner-all")
                }
            })
        }
        if (!n) {
            b.error("Input de endereço precisa ser informado")
        } else {
            var m = b(n).val();
            q.lockAddressField();
            if (m !== "") {
                q.unlockAddressField()
            }
            if (p.executeAddressOnStart) {
                q.setAddressData(p.fillFieldsOnStart)
            }
            b(n).autocomplete({
                source: function (g, d) {
                    var h = q.getCityStateData();
                    var e = g.term.split(",");
                    var c = b.trim(e[0]);
                    var f = b.trim(e[1]);
                    if (f === "") {
                        f = 0
                    }
                    b.ajax({
                        url: p.urlAddress,
                        data: {
                            city: h.city,
                            state: h.state,
                            street: c
                        },
                        success: function (i) {
                            d(b.map(i, function (j) {
                                j.street = j.name;
                                delete j.name;
                                return {
                                    label: j.street + ", " + f + " - " + j.district,
                                    value: j.street + ", " + f,
                                    data: b.extend({}, h, j)
                                }
                            }))
                        }
                    })
                },
                minLength: 3,
                select: function (d, c) {
                    q.setData(n, "geo", c.item.data);
                    q.setAddressData()
                },
                open: function () {
                    b(this).removeClass("ui-corner-all").addClass("ui-corner-top")
                },
                close: function () {
                    b(this).removeClass("ui-corner-top").addClass("ui-corner-all")
                },
                change: function (d, c) {
                    if (c.item !== null) {
                        q.setAddressData()
                    } else {
                        data = b.extend({}, q.getCityStateData(), q.extractAddress(b(n).val()));
                        q.setData(n, "geo", data)
                    }
                }
            })
        }
        return a
    }
})(jQuery);
(function (b) {
    b.countView = function (j, n, i, k, a) {
        if (typeof n !== "string" && n.length <= 0) {
            return false
        }
        if (a instanceof Array === false || a.length <= 0) {
            return false
        }
        if (typeof pageTracker !== "object") {
            return false
        }
        var m = [j, i, k].join(" - ");
        var l = ["view", n].join(" - ");
        b.each(a, function (e, f) {
            try {
                pageTracker._trackEvent(m, l, f)
            } catch (c) {}
            try {
                __alog.poi_premium.show(f, j, n, i, k)
            } catch (d) {}
        });
        return true
    };
    b.fn.countClick = function (h, j, g, i, a) {
        b(this).click(function (c) {
            c.preventDefault();
            var n = this.href;
            var o = this.className.match(/count_click_([A-Z0-9]+)/)[1];
            var e = [h, g, i].join(" - ");
            var d = ["click", j].join(" - ");
            try {
                pageTracker._trackEvent(e, d, o)
            } catch (f) {}
            try {
                __alog.poi_premium.click(o, h, j, g, i)
            } catch (p) {}
            setTimeout('document.location = "' + n + '"', 500)
        })
    };
    b.fn.countClickSearch = function () {
        b(this).each(function (a, f) {
            var e = b(f).data();
            if (!b.isEmptyObject(e)) {
                b(f).find("a:not(.showPhone)").click(function (c) {
                    b(this).unbind("click");
                    c.preventDefault();
                    var d = this.href;
                    try {
                        __alog.poi_premium.click(e.lbsid, e.section, e.bodyarea, e.city, e.state)
                    } catch (i) {}
                    setTimeout('document.location = "' + d + '"', 500)
                })
            }
        })
    }
})(jQuery);
var login_params = {
    useHTML: "true",
    showTermsLink: "false",
    height: 50,
    width: 330,
    containerID: "componentDiv",
    redirectURL: null,
    buttonsStyle: "fullLogo"
};
var header_login_params = {
    useHTML: "true",
    showTermsLink: "false",
    height: 16,
    width: 90,
    containerID: "headerComponentDiv",
    redirectURL: null,
    UIConfig: '<config><body><controls><snbuttons buttonsize="15"></snbuttons></controls></body></config>'
};
var aptUser = Class.create(aptBasic, {
    logged: false,
    id: 0,
    birthday: new Date(),
    name: "",
    email: "",
    password: "",
    token: "",
    services: [],
    profilePhoto: {},
    profile: {},
    gender: "",
    callBackLogin: "",
    callBackLogout: "",
    address: "",
    initialize: function () {},
    setUser: function (b) {
        if (typeof b === "object") {
            this.id = b.id;
            this.birthday = new Date(b.birthday);
            b.name = jq.trim(b.name);
            this.name = b.name.split(/\s+/)[0];
            this.email = b.email;
            this.password = b.password;
            this.token = b.token;
            this.services = b.services;
            this.profilePhoto = b.profilePhoto;
            this.profile = b.profile;
            this.gender = b.gender;
            this.login()
        }
    },
    login: function () {
        this.logged = true;
        if (!this.checkNullness(this.callBackLogin.call)) {
            this.callBackLogin.call()
        }
    },
    logout: function () {
        this.logged = false;
        if (!this.checkNullness(this.callBackLogout.call)) {
            this.callBackLogout.call()
        }
    }
});
aptAddress.addMethods({
    toStr: function () {
        return this.street + ((this.num !== "") ? (", " + this.num) : "") + ((this.city !== "") ? (", " + this.city) : "") + ((this.state !== "") ? (", " + this.state.toUpperCase()) : "")
    },
    toStrStreetNum: function () {
        return this.street + ((this.num !== "") ? (", " + this.num) : "")
    },
    toStrCityState: function () {
        return this.city + ((this.state !== "") ? (", " + this.state) : "")
    },
    toEncodeURI: function () {
        return this.country + "|" + this.state + "|" + this.city + "|" + this.suburb + "|" + this.street + "|" + this.num + "|" + this.zipcode + "|" + this.lat + "|" + this.lon + "|" + this.streetid + "|" + this.approx
    }
});
aptPage.addMethods({
    base64: {},
    user: {},
    section: "",
    localMore: "",
    load: function () {
        this.base64 = new base64("tzmp2u8");
        this.user = new aptUser();
        this.user.callBackLogin = new aptCallback(this.login.bind(this));
        this.user.callBackLogout = new aptCallback(this.logout.bind(this));
        this.logout();
        var b = "";
        b = cookieApt.get(COOKIE_PREFIX + "loggedApt");
        if (b.length > 0) {
            b = this.base64.decrypt(b).evalJSON();
            b.profile = cookieApt.get(COOKIE_PREFIX + "profileApt");
            if (b.profile.length > 0) {
                b.profile = this.base64.decrypt(b.profile).evalJSON()
            }
            b.profilePhoto = cookieApt.get(COOKIE_PREFIX + "photoApt");
            if (b.profilePhoto.length > 0) {
                b.profilePhoto = this.base64.decrypt(b.profilePhoto).evalJSON()
            }
            this.user.setUser(b)
        }
        if (typeof afterLoad !== "undefined" && typeof afterLoad === "function") {
            afterLoad()
        }
    },
    login: function () {
        if ($(this.containers.user.on) !== null) {
            $(this.containers.user.on).removeClassName("hide");
            $(this.containers.user.off).addClassName("hide");
            $(this.containers.user.name).innerHTML = this.user.name
        }
    },
    logout: function () {
        if ($(this.containers.user.off) !== null) {
            $(this.containers.user.off).removeClassName("hide");
            $(this.containers.user.on).addClassName("hide");
            $(this.containers.user.name).innerHTML = ""
        }
    }
});
var pageObj = new aptPage({
    user: {
        on: "logged",
        off: "logoff",
        name: "loggedName"
    },
    header: {
        searchAll: "search_box_all",
        search: "search_box"
    }
});
var __alog = {
    setUID: function () {},
    poi: {
        start: function () {},
        phone: function () {},
        site: function () {},
        description: function () {},
        facebook: function () {},
        twitter: function () {},
        orkut: function () {},
        email: function () {},
        description_email: function () {},
        thumbs_up: function () {},
        thumbs_down: function () {},
        send_photo: function () {},
        sent_photo: function () {},
        widget: function () {}
    }
};
var pageTracker = {
    _trackPageview: function () {}
};
if (jq.browser.msie && jq.browser.version === "6.0") {
    window.onload = function () {
        e("/apontador_v8/js/ie6/")
    }
};
(function (d) {
    function e(a) {
        this.input = a;
        if (a.attr("type") == "password") {
            this.handlePassword()
        }
        d(a[0].form).submit(function () {
            if (a.hasClass("placeholder") && a[0].value == a.attr("placeholder")) {
                a[0].value = ""
            }
        })
    }
    e.prototype = {
        show: function (a) {
            if (this.input[0].value === "" || (a && this.valueIsPlaceholder())) {
                if (this.isPassword) {
                    try {
                        this.input[0].setAttribute("type", "text")
                    } catch (b) {
                        this.input.before(this.fakePassword.show()).hide()
                    }
                }
                if (!d(this.input[0]).is(":focus")) {
                    this.input.addClass("placeholder");
                    this.input[0].value = this.input.attr("placeholder")
                }
            }
        },
        hide: function () {
            if (this.valueIsPlaceholder() && this.input.hasClass("placeholder")) {
                this.input.removeClass("placeholder");
                this.input[0].value = "";
                if (this.isPassword) {
                    try {
                        this.input[0].setAttribute("type", "password")
                    } catch (a) {}
                    this.input.show();
                    this.input[0].focus()
                }
            }
        },
        valueIsPlaceholder: function () {
            return this.input[0].value == this.input.attr("placeholder")
        },
        handlePassword: function () {
            var b = this.input;
            b.attr("realType", "password");
            this.isPassword = true;
            if (d.browser.msie && b[0].outerHTML) {
                var a = d(b[0].outerHTML.replace(/type=(['"])?password\1/gi, "type=$1text$1"));
                this.fakePassword = a.val(b.attr("placeholder")).addClass("placeholder").focus(function () {
                    b.trigger("focus");
                    d(this).hide()
                });
                d(b[0].form).submit(function () {
                    a.remove();
                    b.show()
                })
            }
        }
    };
    var f = !! ("placeholder" in document.createElement("input"));
    d.fn.placeholder = function () {
        return f ? this : this.each(function () {
            var b = d(this);
            var a = new e(b);
            a.show(true);
            b.focus(function () {
                a.hide()
            });
            b.blur(function () {
                a.show(false)
            });
            if (d.browser.msie) {
                d(window).load(function () {
                    if (b.val()) {
                        b.removeClass("placeholder")
                    }
                    a.show(true)
                });
                b.focus(function () {
                    if (this.value == "") {
                        var c = this.createTextRange();
                        c.collapse(true);
                        c.moveStart("character", 0);
                        c.select()
                    }
                })
            }
        })
    }
})(jQuery);
var removeAccents = function (f, d) {
    if (f === undefined || f === "") {
        return ""
    }
    var e = jq.extend({
        replaceRules: {
            a: /à|á|ã|â|ä/,
            e: /è|é|ê|ẽ|ë/,
            i: /ì|í|î|ï/,
            o: /ò|ó|ô|õ|ö/,
            u: /ù|ú|ũ|û|ü/,
            c: /ç/,
            n: /ñ/,
            A: /À|Á|Ã|Â|Ä/,
            E: /È|É|Ê|Ẽ|Ë/,
            I: /Ì|Í|Î|Ï/,
            O: /Ò|Ó|Ô|Õ|Ö/,
            U: /Ù|Ú|Ũ|Û|Ü/,
            C: /Ç/,
            N: /Ñ/
        }
    }, d || {});
    jq.each(e.replaceRules, function (a, b) {
        f = f.replace(b, a)
    });
    return f
};
var ucfirst = function (b) {
    return b.replace(/([a-záéíóúàâêôãõç])/i, function (a) {
        return a.toUpperCase()
    })
};
var format_title = function (i) {
    var g = ["no", "nos", "na", "nas", "do", "dos", "da", "das", "de", "e", "a", "o"],
        f = [],
        j, h;
    i = jq.trim(i);
    j = i.replace(/(\s|\t)+/g, "|").split("|");
    jq(j).each(function (b, a) {
        a = a.toLowerCase();
        if (jq.inArray(a, g) === -1) {
            f.push(ucfirst(a))
        } else {
            f.push(a)
        }
    });
    h = f.join(" ");
    h = ucfirst(h);
    return h
};
var normalize = function (c) {
    var d = removeAccents(c);
    d = d.replace(/\s/g, "_");
    return d.toLowerCase()
};
jq(document).ready(function () {
    jq("*[placeholder]").placeholder();
    var o = jq("#cidade_loc").val(),
        x = jq("#estado_loc").val(),
        y = "",
        p, w, r, u, t, z, s, q, v, n;
    if (o !== "" && x !== "" && x !== "br" && x !== "BR") {
        y = o + ", " + x
    } else {
        if (jq.cookie(COOKIE_PREFIX + "default_loc")) {
            y = jq.cookie(COOKIE_PREFIX + "default_loc")
        } else {
            y = "SAO PAULO, SP"
        }
    }
    jq("#loc").val(y);
    p = jq.parseJSON(jq("#citiesObj").val());
    w = function (a) {
        a = a.replace(" ", "_");
        var b;
        for (b in p) {
            if (p.hasOwnProperty(b) && b === a) {
                return true
            }
        }
        return false
    };
    if (jq.cookie(COOKIE_PREFIX + "default_loc")) {
        r = jq.cookie(COOKIE_PREFIX + "default_loc").split(", ");
        u = normalize(r[0]);
        t = normalize(r[1]);
        z = jq("#cidade_url").val();
        if (!w(u) && t !== "") {
            s = "/local/" + t + "/" + u + ".html";
            jq("#link_belo_horizonte").hide();
            u = u.replace(/_/g, " ");
            jq("#otherCity a").attr("href", s).html(format_title(u));
            if (u === z) {
                jq("#otherCity a").attr("rel", "nofollow")
            }
            jq("#otherCity").show()
        }
    }
    jq('a[href^="/accounts/login.html"]').click(function (a) {
        jq.cookie("fbsr_" + FACEBOOK_APP_ID, null, {
            domain: ".apontador.com.br"
        })
    });
    jq("a[rel=logout]").click(function () {
        jq.cookie("fbsr_" + FACEBOOK_APP_ID, null, {
            domain: ".apontador.com.br"
        });
        window.location.href = "/accounts/logout.html"
    });
    jq("a.droplink").mouseover(function (a) {
        a.preventDefault();
        jq("." + jq(this).attr("rel")).slideDown("fast")
    });
    jq(".dropmenu").mouseleave(function () {
        jq(".dropdown").slideUp("fast")
    });
    openUnder();
    jq.aptAutocomplete("#loc", "#loc_b", {
        fieldsToFill: {
            x: "#lng",
            y: "#lat"
        },
        executeCityOnStart: true,
        executeAddressOnStart: true,
        fillFieldsOnStart: false
    });
    q = function () {
        v = jq("#loc").val();
        n = /\w+,\s?\w{2}/;
        if (n.test(v)) {
            jq.cookie(COOKIE_PREFIX + "default_loc", v, {
                expires: 7,
                path: "/"
            })
        }
    };
    jq("#search_form").submit(function (a) {
        a.preventDefault();
        q();
        var b = [];
        if (jq("#loc_b").val() === "") {
            jq("#lat").val("");
            jq("#lng").val("")
        }
        if (jq("#q").val() !== "") {
            b.push("q=" + jq("#q").val())
        }
        if (jq("#loc").val() !== "") {
            b.push("loc=" + jq("#loc").val())
        }
        if (jq("#loc_b").val() !== "") {
            b.push("loc_b=" + jq("#loc_b").val())
        }
        if (jq("#lat").val() !== "") {
            b.push("lat=" + jq("#lat").val())
        }
        if (jq("#lng").val() !== "") {
            b.push("lng=" + jq("#lng").val())
        }
        window.location = "/local/search.html?" + encodeURI(b.join("&"))
    });
    jq("a#linkSpecify").click(function (a) {
        jq(".busca_endereco").slideToggle();
        jq("#loc_b").focus();
        a.preventDefault();
        return false
    });
    if (jq("#loc_b").val() !== "") {
        jq("a#linkSpecify").trigger("click")
    }
    jq(".silverbutton>button, input:submit, #signIn").button()
});
var isValidUrl = function (b) {
    regex = new RegExp(/\w+:\/\//i);
    return regex.test(b)
};
var Redirect = function (b) {
    if (isValidUrl(b)) {
        window.location.href = decodeURIComponent(b)
    }
};
(function (f) {
    var e = f.scrollTo = function (a, b, c) {
        f(window).scrollTo(a, b, c)
    };
    e.defaults = {
        axis: "xy",
        duration: parseFloat(f.fn.jquery) >= 1.3 ? 0 : 1
    };
    e.window = function (a) {
        return f(window)._scrollable()
    };
    f.fn._scrollable = function () {
        return this.map(function () {
            var b = this,
                c = !b.nodeName || f.inArray(b.nodeName.toLowerCase(), ["iframe", "#document", "html", "body"]) != -1;
            if (!c) {
                return b
            }
            var a = (b.contentWindow || b).document || b.ownerDocument || b;
            return f.browser.safari || a.compatMode == "BackCompat" ? a.body : a.documentElement
        })
    };
    f.fn.scrollTo = function (a, b, c) {
        if (typeof b == "object") {
            c = b;
            b = 0
        }
        if (typeof c == "function") {
            c = {
                onAfter: c
            }
        }
        if (a == "max") {
            a = 9000000000
        }
        c = f.extend({}, e.defaults, c);
        b = b || c.speed || c.duration;
        c.queue = c.queue && c.axis.length > 1;
        if (c.queue) {
            b /= 2
        }
        c.offset = d(c.offset);
        c.over = d(c.over);
        return this._scrollable().each(function () {
            var o = this,
                q = f(o),
                p = a,
                r, t = {}, n = q.is("html,body");
            switch (typeof p) {
            case "number":
            case "string":
                if (/^([+-]=)?\d+(\.\d+)?(px|%)?$/.test(p)) {
                    p = d(p);
                    break
                }
                p = f(p, this);
            case "object":
                if (p.is || p.style) {
                    r = (p = f(p)).offset()
                }
            }
            f.each(c.axis.split(""), function (k, j) {
                var i = j == "x" ? "Left" : "Top",
                    g = i.toLowerCase(),
                    l = "scroll" + i,
                    m = o[l],
                    v = e.max(o, j);
                if (r) {
                    t[l] = r[g] + (n ? 0 : m - q.offset()[g]);
                    if (c.margin) {
                        t[l] -= parseInt(p.css("margin" + i)) || 0;
                        t[l] -= parseInt(p.css("border" + i + "Width")) || 0
                    }
                    t[l] += c.offset[g] || 0;
                    if (c.over[g]) {
                        t[l] += p[j == "x" ? "width" : "height"]() * c.over[g]
                    }
                } else {
                    var h = p[g];
                    t[l] = h.slice && h.slice(-1) == "%" ? parseFloat(h) / 100 * v : h
                }
                if (/^\d+$/.test(t[l])) {
                    t[l] = t[l] <= 0 ? 0 : Math.min(t[l], v)
                }
                if (!k && c.queue) {
                    if (m != t[l]) {
                        s(c.onAfterFirst)
                    }
                    delete t[l]
                }
            });
            s(c.onAfter);

            function s(g) {
                q.animate(t, b, c.easing, g && function () {
                    g.call(this, a, c)
                })
            }
        }).end()
    };
    e.max = function (a, b) {
        var c = b == "x" ? "Width" : "Height",
            m = "scroll" + c;
        if (!f(a).is("html,body")) {
            return a[m] - f(a)[c.toLowerCase()]()
        }
        var k = "client" + c,
            l = a.ownerDocument.documentElement,
            n = a.ownerDocument.body;
        return Math.max(l[m], n[m]) - Math.min(l[k], n[k])
    };

    function d(a) {
        return typeof a == "object" ? a : {
            top: a,
            left: a
        }
    }
})(jQuery);
var followingContainer = null;
(function (b) {
    b.configButtonsParams = function (a, d) {
        a = a || "follow";
        if (a === "follow") {
            return {
                url: "/accounts/follow/" + d + ".html",
                label: "Seguir",
                responseType: "ajax",
                userid: d
            }
        } else {
            return {
                url: "/accounts/unfollow/" + d + ".html",
                label: "Parar de seguir",
                responseType: "ajax",
                userid: d
            }
        }
    };
    b.createButton = function (a) {
        b(a).button()
    };
    b.setButtonIcon = function (d, a) {
        if (a === "follow") {
            b(d).button("option", "icons", {
                primary: null
            })
        } else {
            b(d).button("option", "icons", {
                primary: null
            })
        }
    };
    b.setButtonState = function (f, g, a) {
        var h = (g === "follow") ? "unfollow" : "follow";
        b(f).unbind("click").button("option", "label", a.label).bind("click", function (c) {
            c.preventDefault();
            b.post(a.url, {
                responseType: a.responseType
            }, function (d) {
                if (d.success === true) {
                    if (followingContainer === "onSearch") {
                        b.setButtonState(f, h, b.configButtonsParams(h, a.userid))
                    } else {
                        b(f).remove()
                    }
                }
            })
        })
    };
    b.getUserIdList = function (a) {
        var d = [];
        a = a || "[class*=user_id_]";
        b(a).each(function () {
            d.push(b(this).attr("class").replace(/[a-z_\s\t]*/ig, ""))
        });
        if (d.length > 0) {
            return b.unique(d)
        } else {
            return false
        }
    };
    b.getFollowing = function (d, a) {
        followingContainer = a;
        if (d.length > 0 && b.isArray(d)) {
            userList = b.ajax({
                url: "/accounts/checkwhoisfollowinginthelist.html",
                type: "POST",
                data: ({
                    users: d.join(",")
                }),
                dataType: "json",
                success: function (c) {
                    usersFound = c.following;
                    if (a === "onPOI") {
                        jq.setFollowingOnPOI(d, usersFound);
                        jq(".userfollowpoi").removeClass("hide")
                    } else {
                        if (a === "onSearch") {
                            jq.setFollowingOnSearch(d, usersFound);
                            jq(".acoes").removeClass("hide")
                        }
                    }
                }
            })
        } else {
            return false
        }
    };
    b.setFollowingOnSearch = function (d, a) {
        if (pageObj.user.logged) {
            b.each(d, function (c, f) {
                configButtons = b.configButtonsParams("follow", f);
                b.createButton(".user_id_" + f + " .acoes a");
                b.setButtonIcon(".user_id_" + f + " .acoes a", "follow");
                b.setButtonState(".user_id_" + f + " .acoes a", "follow", configButtons)
            });
            b.each(a, function (c, f) {
                configButtons = b.configButtonsParams("unfollow", f);
                b.createButton(".user_id_" + f + " .acoes a");
                b.setButtonIcon(".user_id_" + f + " .acoes a", "unfollow");
                b.setButtonState(".user_id_" + f + " .acoes a", "unfollow", configButtons)
            })
        } else {
            b.each(d, function (c, f) {
                b.createButton(".user_id_" + f + " .acoes a")
            })
        }
    };
    b.setFollowingOnPOI = function (d, a) {
        if (pageObj.user.logged) {
            b.each(d, function (c, f) {
                if (pageObj.user.id !== f) {
                    configButtons = b.configButtonsParams("follow", f);
                    b.createButton(".user_id_" + f + " a");
                    b.setButtonIcon(".user_id_" + f + " a", "follow");
                    b.setButtonState(".user_id_" + f + " a", "follow", configButtons);
                    b(".user_id_" + f + " a").removeClass("hide")
                } else {
                    b(".user_id_" + f).remove()
                }
            });
            b.each(a, function (c, f) {
                b(".user_id_" + f).remove()
            })
        } else {
            b.each(d, function (c, f) {
                b.createButton(".user_id_" + f + " a.follow")
            })
        }
    }
})(jQuery);
(function (b) {
    b.fn.aptAutocompleteCatSubcat = function (a) {
        b(this).autocomplete({
            minLength: 2,
            source: function (e, f) {
                lastXhr = b.getJSON("/local/getAjaxCatSubcat.html", e, function (c) {
                    f(b.map(c, function (d) {
                        return {
                            label: jq.format_title(d.full_text),
                            data: d
                        }
                    }))
                })
            },
            select: function (f, e) {
                b(this).data("cat_subcat", e.item.data);
                if (typeof a === "function") {
                    a()
                }
            },
            open: function () {
                b(this).removeClass("ui-corner-all").addClass("ui-corner-top")
            },
            close: function () {
                b(this).removeClass("ui-corner-top").addClass("ui-corner-all")
            }
        })
    }
})(jQuery);
(function (e) {
    var h = (window.orientation != undefined),
        f = ((e.browser.opera || (e.browser.mozilla && parseFloat(e.browser.version.substr(0, 3)) < 1.9)) ? "input" : "paste");
    e.event.special.paste = {
        setup: function () {
            if (this.addEventListener) {
                this.addEventListener(f, g, false)
            } else {
                if (this.attachEvent) {
                    this.attachEvent(f, g)
                }
            }
        },
        teardown: function () {
            if (this.removeEventListener) {
                this.removeEventListener(f, g, false)
            } else {
                if (this.detachEvent) {
                    this.detachEvent(f, g)
                }
            }
        }
    };

    function g(b) {
        var a = this;
        b = e.event.fix(b || window.e);
        b.type = "paste";
        setTimeout(function () {
            e.event.handle.call(a, b)
        }, 1)
    }
    e.extend({
        mask: {
            rules: {
                z: /[a-z]/,
                Z: /[A-Z]/,
                a: /[a-zA-Z]/,
                "*": /[0-9a-zA-Z]/,
                "@": /[0-9a-zA-ZçÇáàãâéèêíìóòôõúùü]/
            },
            keyRepresentation: {
                8: "backspace",
                9: "tab",
                13: "enter",
                16: "shift",
                17: "control",
                18: "alt",
                27: "esc",
                33: "page up",
                34: "page down",
                35: "end",
                36: "home",
                37: "left",
                38: "up",
                39: "right",
                40: "down",
                45: "insert",
                46: "delete",
                116: "f5",
                123: "f12",
                224: "command"
            },
            iphoneKeyRepresentation: {
                10: "go",
                127: "delete"
            },
            signals: {
                "+": "",
                "-": "-"
            },
            options: {
                attr: "alt",
                mask: null,
                type: "fixed",
                maxLength: -1,
                defaultValue: "",
                signal: false,
                textAlign: true,
                selectCharsOnFocus: true,
                autoTab: true,
                setSize: false,
                fixedChars: "[(),.:/ -]",
                onInvalid: function () {},
                onValid: function () {},
                onOverflow: function () {}
            },
            masks: {
                phone: {
                    mask: "(99) 9999-9999"
                },
                "phone-us": {
                    mask: "(999) 999-9999"
                },
                cpf: {
                    mask: "999.999.999-99"
                },
                cnpj: {
                    mask: "99.999.999/9999-99"
                },
                date: {
                    mask: "39/19/9999"
                },
                "date-us": {
                    mask: "19/39/9999"
                },
                cep: {
                    mask: "99999-999"
                },
                time: {
                    mask: "29:59"
                },
                cc: {
                    mask: "9999 9999 9999 9999"
                },
                integer: {
                    mask: "999.999.999.999",
                    type: "reverse"
                },
                decimal: {
                    mask: "99,999.999.999.999",
                    type: "reverse",
                    defaultValue: "000"
                },
                "decimal-us": {
                    mask: "99.999,999,999,999",
                    type: "reverse",
                    defaultValue: "000"
                },
                "signed-decimal": {
                    mask: "99,999.999.999.999",
                    type: "reverse",
                    defaultValue: "+000"
                },
                "signed-decimal-us": {
                    mask: "99,999.999.999.999",
                    type: "reverse",
                    defaultValue: "+000"
                }
            },
            init: function () {
                if (!this.hasInit) {
                    var a = this,
                        b, c = (h) ? this.iphoneKeyRepresentation : this.keyRepresentation;
                    this.ignore = false;
                    for (b = 0; b <= 9; b++) {
                        this.rules[b] = new RegExp("[0-" + b + "]")
                    }
                    this.keyRep = c;
                    this.ignoreKeys = [];
                    e.each(c, function (d) {
                        a.ignoreKeys.push(parseInt(d))
                    });
                    this.hasInit = true
                }
            },
            set: function (j, b) {
                var a = this,
                    c = e(j),
                    d = "maxLength";
                b = b || {};
                this.init();
                return c.each(function () {
                    if (b.attr) {
                        a.options.attr = b.attr
                    }
                    var w = e(this),
                        i = e.extend({}, a.options),
                        v = w.attr(i.attr),
                        r = "";
                    r = (typeof b == "string") ? b : (v != "") ? v : null;
                    if (r) {
                        i.mask = r
                    }
                    if (a.masks[r]) {
                        i = e.extend(i, a.masks[r])
                    }
                    if (typeof b == "object" && b.constructor != Array) {
                        i = e.extend(i, b)
                    }
                    if (e.metadata) {
                        i = e.extend(i, w.metadata())
                    }
                    if (i.mask != null) {
                        if (w.data("mask")) {
                            a.unset(w)
                        }
                        var s = i.defaultValue,
                            t = (i.type == "reverse"),
                            u = new RegExp(i.fixedChars, "g");
                        if (i.maxLength == -1) {
                            i.maxLength = w.attr(d)
                        }
                        i = e.extend({}, i, {
                            fixedCharsReg: new RegExp(i.fixedChars),
                            fixedCharsRegG: u,
                            maskArray: i.mask.split(""),
                            maskNonFixedCharsArray: i.mask.replace(u, "").split("")
                        });
                        if ((i.type == "fixed" || t) && i.setSize && !w.attr("size")) {
                            w.attr("size", i.mask.length)
                        }
                        if (t && i.textAlign) {
                            w.css("text-align", "right")
                        }
                        if (this.value != "" || s != "") {
                            var x = a.string((this.value != "") ? this.value : s, i);
                            this.defaultValue = x;
                            w.val(x)
                        }
                        if (i.type == "infinite") {
                            i.type = "repeat"
                        }
                        w.data("mask", i);
                        w.removeAttr(d);
                        w.bind("keydown.mask", {
                            func: a._onKeyDown,
                            thisObj: a
                        }, a._onMask).bind("keypress.mask", {
                            func: a._onKeyPress,
                            thisObj: a
                        }, a._onMask).bind("keyup.mask", {
                            func: a._onKeyUp,
                            thisObj: a
                        }, a._onMask).bind("paste.mask", {
                            func: a._onPaste,
                            thisObj: a
                        }, a._onMask).bind("focus.mask", a._onFocus).bind("blur.mask", a._onBlur).bind("change.mask", a._onChange)
                    }
                })
            },
            unset: function (b) {
                var a = e(b);
                return a.each(function () {
                    var d = e(this);
                    if (d.data("mask")) {
                        var c = d.data("mask").maxLength;
                        if (c != -1) {
                            d.attr("maxLength", c)
                        }
                        d.unbind(".mask").removeData("mask")
                    }
                })
            },
            string: function (l, b) {
                this.init();
                var k = {};
                if (typeof l != "string") {
                    l = String(l)
                }
                switch (typeof b) {
                case "string":
                    if (this.masks[b]) {
                        k = e.extend(k, this.masks[b])
                    } else {
                        k.mask = b
                    }
                    break;
                case "object":
                    k = b
                }
                if (!k.fixedChars) {
                    k.fixedChars = this.options.fixedChars
                }
                var a = new RegExp(k.fixedChars),
                    c = new RegExp(k.fixedChars, "g");
                if ((k.type == "reverse") && k.defaultValue) {
                    if (typeof this.signals[k.defaultValue.charAt(0)] != "undefined") {
                        var d = l.charAt(0);
                        k.signal = (typeof this.signals[d] != "undefined") ? this.signals[d] : this.signals[k.defaultValue.charAt(0)];
                        k.defaultValue = k.defaultValue.substring(1)
                    }
                }
                return this.__maskArray(l.split(""), k.mask.replace(c, "").split(""), k.mask.split(""), k.type, k.maxLength, k.defaultValue, a, k.signal)
            },
            _onFocus: function (c) {
                var b = e(this),
                    a = b.data("mask");
                a.inputFocusValue = b.val();
                a.changed = false;
                if (a.selectCharsOnFocus) {
                    b.select()
                }
            },
            _onBlur: function (c) {
                var b = e(this),
                    a = b.data("mask");
                if (a.inputFocusValue != b.val() && !a.changed) {
                    b.trigger("change")
                }
            },
            _onChange: function (a) {
                e(this).data("mask").changed = true
            },
            _onMask: function (a) {
                var c = a.data.thisObj,
                    b = {};
                b._this = a.target;
                b.$this = e(b._this);
                if (b.$this.attr("readonly")) {
                    return true
                }
                b.data = b.$this.data("mask");
                b[b.data.type] = true;
                b.value = b.$this.val();
                b.nKey = c.__getKeyNumber(a);
                b.range = c.__getRange(b._this);
                b.valueArray = b.value.split("");
                return a.data.func.call(c, a, b)
            },
            _onKeyDown: function (b, c) {
                this.ignore = e.inArray(c.nKey, this.ignoreKeys) > -1 || b.ctrlKey || b.metaKey || b.altKey;
                if (this.ignore) {
                    var a = this.keyRep[c.nKey];
                    c.data.onValid.call(c._this, a ? a : "", c.nKey)
                }
                return h ? this._keyPress(b, c) : true
            },
            _onKeyUp: function (a, b) {
                if (b.nKey == 9 || b.nKey == 16) {
                    return true
                }
                if (b.data.type == "repeat") {
                    this.__autoTab(b);
                    return true
                }
                return this._onPaste(a, b)
            },
            _onPaste: function (b, c) {
                if (c.reverse) {
                    this.__changeSignal(b.type, c)
                }
                var a = this.__maskArray(c.valueArray, c.data.maskNonFixedCharsArray, c.data.maskArray, c.data.type, c.data.maxLength, c.data.defaultValue, c.data.fixedCharsReg, c.data.signal);
                c.$this.val(a);
                if (!c.reverse && c.data.defaultValue.length && (c.range.start == c.range.end)) {
                    this.__setRange(c._this, c.range.start, c.range.end)
                }
                if ((e.browser.msie || e.browser.safari) && !c.reverse) {
                    this.__setRange(c._this, c.range.start, c.range.end)
                }
                if (this.ignore) {
                    return true
                }
                this.__autoTab(c);
                return true
            },
            _onKeyPress: function (s, a) {
                if (this.ignore) {
                    return true
                }
                if (a.reverse) {
                    this.__changeSignal(s.type, a)
                }
                var t = String.fromCharCode(a.nKey),
                    v = a.range.start,
                    p = a.value,
                    c = a.data.maskArray;
                if (a.reverse) {
                    var d = p.substr(0, v),
                        r = p.substr(a.range.end, p.length);
                    p = d + t + r;
                    if (a.data.signal && (v - a.data.signal.length > 0)) {
                        v -= a.data.signal.length
                    }
                }
                var u = p.replace(a.data.fixedCharsRegG, "").split(""),
                    b = this.__extraPositionsTill(v, c, a.data.fixedCharsReg);
                a.rsEp = v + b;
                if (a.repeat) {
                    a.rsEp = 0
                }
                if (!this.rules[c[a.rsEp]] || (a.data.maxLength != -1 && u.length >= a.data.maxLength && a.repeat)) {
                    a.data.onOverflow.call(a._this, t, a.nKey);
                    return false
                } else {
                    if (!this.rules[c[a.rsEp]].test(t)) {
                        a.data.onInvalid.call(a._this, t, a.nKey);
                        return false
                    } else {
                        a.data.onValid.call(a._this, t, a.nKey)
                    }
                }
                var q = this.__maskArray(u, a.data.maskNonFixedCharsArray, c, a.data.type, a.data.maxLength, a.data.defaultValue, a.data.fixedCharsReg, a.data.signal, b);
                a.$this.val(q);
                return (a.reverse) ? this._keyPressReverse(s, a) : (a.fixed) ? this._keyPressFixed(s, a) : true
            },
            _keyPressFixed: function (a, b) {
                if (b.range.start == b.range.end) {
                    if ((b.rsEp == 0 && b.value.length == 0) || b.rsEp < b.value.length) {
                        this.__setRange(b._this, b.rsEp, b.rsEp + 1)
                    }
                } else {
                    this.__setRange(b._this, b.range.start, b.range.end)
                }
                return true
            },
            _keyPressReverse: function (a, b) {
                if (e.browser.msie && ((b.range.start == 0 && b.range.end == 0) || b.range.start != b.range.end)) {
                    this.__setRange(b._this, b.value.length)
                }
                return false
            },
            __autoTab: function (b) {
                if (b.data.autoTab && ((b.$this.val().length >= b.data.maskArray.length && !b.repeat) || (b.data.maxLength != -1 && b.valueArray.length >= b.data.maxLength && b.repeat))) {
                    var a = this.__getNextInput(b._this, b.data.autoTab);
                    if (a) {
                        b.$this.trigger("blur");
                        a.focus().select()
                    }
                }
            },
            __changeSignal: function (b, c) {
                if (c.data.signal !== false) {
                    var a = (b == "paste") ? c.value.charAt(0) : String.fromCharCode(c.nKey);
                    if (this.signals && (typeof this.signals[a] != "undefined")) {
                        c.data.signal = this.signals[a]
                    }
                }
            },
            __getKeyNumber: function (a) {
                return (a.charCode || a.keyCode || a.which)
            },
            __maskArray: function (s, d, c, p, a, q, t, r, b) {
                if (p == "reverse") {
                    s.reverse()
                }
                s = this.__removeInvalidChars(s, d, p == "repeat" || p == "infinite");
                if (q) {
                    s = this.__applyDefaultValue.call(s, q)
                }
                s = this.__applyMask(s, c, b, t);
                switch (p) {
                case "reverse":
                    s.reverse();
                    return (r || "") + s.join("").substring(s.length - c.length);
                case "infinite":
                case "repeat":
                    var o = s.join("");
                    return (a != -1 && s.length >= a) ? o.substring(0, a) : o;
                default:
                    return s.join("").substring(0, c.length)
                }
                return ""
            },
            __applyDefaultValue: function (c) {
                var a = c.length,
                    b = this.length,
                    d;
                for (d = b - 1; d >= 0; d--) {
                    if (this[d] == c.charAt(0)) {
                        this.pop()
                    } else {
                        break
                    }
                }
                for (d = 0; d < a; d++) {
                    if (!this[d]) {
                        this[d] = c.charAt(d)
                    }
                }
                return this
            },
            __removeInvalidChars: function (d, c, a) {
                for (var b = 0, j = 0; b < d.length; b++) {
                    if (c[j] && this.rules[c[j]] && !this.rules[c[j]].test(d[b])) {
                        d.splice(b, 1);
                        if (!a) {
                            j--
                        }
                        b--
                    }
                    if (!a) {
                        j++
                    }
                }
                return d
            },
            __applyMask: function (d, b, j, a) {
                if (typeof j == "undefined") {
                    j = 0
                }
                for (var c = 0; c < d.length + j; c++) {
                    if (b[c] && a.test(b[c])) {
                        d.splice(c, 0, b[c])
                    }
                }
                return d
            },
            __extraPositionsTill: function (d, b, a) {
                var c = 0;
                while (a.test(b[d++])) {
                    c++
                }
                return c
            },
            __getNextInput: function (t, b) {
                var o = t.form.elements,
                    d = e.inArray(t, o) + 1,
                    s = null,
                    p;
                for (p = d; p < o.length; p++) {
                    s = e(o[p]);
                    if (this.__isNextInput(s, b)) {
                        return s
                    }
                }
                var a = document.forms,
                    c = e.inArray(t.form, a) + 1,
                    r, q = null;
                for (r = c; r < a.length; r++) {
                    q = a[r].elements;
                    for (p = 0; p < q.length; p++) {
                        s = e(q[p]);
                        if (this.__isNextInput(s, b)) {
                            return s
                        }
                    }
                }
                return null
            },
            __isNextInput: function (c, a) {
                var b = c.get(0);
                return b && (b.offsetWidth > 0 || b.offsetHeight > 0) && b.nodeName != "FIELDSET" && (a === true || (typeof a == "string" && c.is(a)))
            },
            __setRange: function (c, d, a) {
                if (typeof a == "undefined") {
                    a = d
                }
                if (c.setSelectionRange) {
                    c.setSelectionRange(d, a)
                } else {
                    var b = c.createTextRange();
                    b.collapse();
                    b.moveStart("character", d);
                    b.moveEnd("character", a - d);
                    b.select()
                }
            },
            __getRange: function (b) {
                if (!e.browser.msie) {
                    return {
                        start: b.selectionStart,
                        end: b.selectionEnd
                    }
                }
                var c = {
                    start: 0,
                    end: 0
                }, a = document.selection.createRange();
                c.start = 0 - a.duplicate().moveStart("character", - 100000);
                c.end = c.start + a.text.length;
                return c
            },
            unmaskedVal: function (a) {
                return e(a).val().replace(e.mask.fixedCharsRegG, "")
            }
        }
    });
    e.fn.extend({
        setMask: function (a) {
            return e.mask.set(this, a)
        },
        unsetMask: function () {
            return e.mask.unset(this)
        },
        unmaskedVal: function () {
            return e.mask.unmaskedVal(this[0])
        }
    })
})(jQuery);
var google_ad_request_done, google_ad_client, google_ad_output, google_max_num_ads, google_ad_type, google_feedback, _poi_ad_element;

function showProfileAd(e, g, h) {
    var f = function (a) {
        if (a.total) {
            if (!a.results[0].information.photoUrl) {
                a.results[0].information.photoUrl = "/apontador_v8/images/v9/sem_foto_perfil.jpg"
            }
            jq(e).html('<a href="' + a.results[0].url + '" title=""><img src="' + a.results[0].information.photoUrl + '" alt="" /></a><h3><a alt="' + a.results[0].name + '" title="' + a.results[0].name + '" href="' + a.results[0].url + '">' + jq.limit_text(a.results[0].name, 15) + '</a></h3><p><a href="' + a.results[0].url + '" title="">' + jq.limit_text(a.results[0].information.description, 65) + '</a></p><a href="' + a.results[0].url + '" class="right f10">Veja mais »</a>');
            jq(e).removeClass("hide").addClass("clearfix")
        }
    };
    premiumAd(e, f, {
        adFormat: "perfil",
        numItems: 1,
        city: g,
        state: h
    })
}
function showPoiAd(k, p, n, m, o, j) {
    var l = function () {
        jq(".anuncios").each(function (d, b) {
            var a = jq(b).data();
            if (!jq.isEmptyObject(a)) {
                try {
                    __alog.poi_premium.show(a.lbsid, a.section, a.bodyarea, a.city, a.state)
                } catch (c) {}
                jq(b).find("a").click(function (e) {
                    e.preventDefault();
                    __alog.poi_premium.click(a.lbsid, a.section, a.bodyarea, a.city, a.state);
                    setTimeout('document.location = "' + a.url + '"', 500)
                })
            }
        })
    };
    var q = function (a) {
        if (a.total) {
            var c = '<p class="ar ar oblique">Anúncio Apontador+</p>';
            for (var b = 0; b < a.total; b++) {
                c += '<div class="anuncios" data-url="' + a.results[b].url + '" data-lbsid="' + a.results[b].lbsid + '" data-city="' + jq.removeAccents(m) + '" data-state="' + o + '" data-bodyarea="anuncio" data-section="poi" ><p class="bold ad_line1"><a href="' + a.results[b].url + '">' + a.results[b].name + '</a></p><p class="al f11"><a href="' + a.results[b].url + '">' + jq.limit_text(a.results[b].information.description, 100) + '</a></p><p class="f10"><a href="' + a.results[b].url + '" class="cinza2">Conheça este local »</a></p></div>'
            }
            if (a.total <= 2) {
                c += '<div class="anuncios"><p class="bold ad_line1"><a href="/mais/">Use a internet para trazer Clientes</a></p><p class="al f11"><a href="/mais/">Divulgue agora no <strong>Apontador+</strong></a></p><p class="f10"><a href="/mais/" class="cinza2">Saiba mais »</a></p></div>';
                a.total++
            }
            jq(k).html(c);
            l();
            if (a.total <= 2) {
                jq(".anuncios").css("width", 330)
            }
            if (!jq(k).hasClass("anuncioPOI")) {
                jq(k).addClass("anuncioPOI")
            }
        }
    };
    if (Math.floor(Math.random() * 100) <= p) {
        premiumAd(k, q, {
            adFormat: "poi",
            numItems: 3,
            city: m,
            state: o,
            categoryId: n
        })
    } else {
        googleAd(k)
    }
}
function premiumAd(e, f, d) {
    jq.ajax({
        cache: true,
        url: "/local/getAjaxPremiumLocalList.html",
        type: "GET",
        data: d,
        success: f,
        dataType: "json"
    })
}
var google_adnum = 0;

function google_ad_request_done(c) {
    var d = "";
    if (c.length === 0) {
        return
    }
    if (c[0].type === "flash") {
        d += '<a href="' + google_info.feedback_url + '" style="color:000000">Anúncios Google</a><br><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" WIDTH="' + google_ad.image_width + '" HEIGHT="' + google_ad.image_height + '"> <PARAM NAME="movie" VALUE="' + google_ad.image_url + '"><PARAM NAME="quality" VALUE="high"><PARAM NAME="AllowScriptAccess" VALUE="never"><EMBED src="' + google_ad.image_url + '" WIDTH="' + google_ad.image_width + '" HEIGHT="' + google_ad.image_height + '" TYPE="application/x-shockwave-flash" AllowScriptAccess="never"  PLUGINSPAGE="http://www.macromedia.com/go/getflashplayer"></EMBED></OBJECT>'
    } else {
        if (c[0].type === "image") {
            d += '<a href="' + google_info.feedback_url + '" style="color:000000">Anúncios Google</a><br> <a href="' + c[0].url + '" target="_top" title="go to ' + c[0].visible_url + '" onmouseout="window.status=\'\'" onmouseover="window.status=\'go to ' + c[0].visible_url + '\';return true"><img border="0" src="' + c[0].image_url + '"width="' + c[0].image_width + '"height="' + c[0].image_height + '"></a>'
        } else {
            if (c[0].type === "html") {
                d += c[0].snippet
            } else {
                if (c.length === 1) {
                    d += '<table class="ad"><tr height=5%><td ><a class="abg" href="' + google_info.feedback_url + '">Anúncios Google</a></td></tr>';
                    d += "<tr>";
                    d += '<td class="ac"><a class = "adTitle_a w255" href="' + c[0].url + '" onmouseout="window.status=\'\'" onmouseover="window.status=\'go to ' + c[0].visible_url + '\';return true"><span class="adTitle">' + c[0].line1 + '</span></a><div class="adText w255 margin_auto">' + c[0].line2 + " " + c[0].line3 + '</div><div><a class="adLink_a w255" href="' + c[0].url + '" onmouseout="window.status=\'\'" onmouseover="window.status=\'go to ' + c[0].visible_url + '\';return true"><span class="adLink">' + c[0].visible_url + "</span></a></div></td>";
                    d += "</tr></table>"
                } else {
                    if (c.length > 1) {
                        d += '<table class="ad"><tr height=5%><td ><a class="abg" href="' + google_info.feedback_url + '">Anúncios Google</a></td></tr>';
                        d += "<tr>";
                        for (i = 0; i < c.length; ++i) {
                            d += '<td><a class = "adTitle_a" href="' + c[i].url + '" onmouseout="window.status=\'\'" onmouseover="window.status=\'go to ' + c[i].visible_url + '\';return true"><span class="adTitle">' + c[i].line1 + '</span></a><div class="adText">' + c[i].line2 + " " + c[i].line3 + '</div><div><a class = "adLink_a" href="' + c[i].url + '" onmouseout="window.status=\'\'" onmouseover="window.status=\'go to ' + c[i].visible_url + '\';return true"><span class="adLink">' + c[i].visible_url + "</span></a></div></td>"
                        }
                        d += "</tr></table>"
                    }
                }
            }
        }
    }
    google_adnum += c.length;
    if (!jq(_poi_ad_element).hasClass("anuncioPOI")) {
        jq(_poi_ad_element).html(d);
        jq(_poi_ad_element).addClass("anuncioPOI")
    }
}
google_ad_client = "pub-3802540235857709";
google_ad_channel = "4004428978";
google_ad_output = "js";
google_max_num_ads = "3";
google_feedback = "on";
google_ad_type = "text";
google_image_size = "780x90";

function googleAd(b) {
    _poi_ad_element = b;
    document.write(unescape("%3Cscript type='text/javascript' src='http://pagead2.googlesyndication.com/pagead/show_ads.js'%3E%3C/script%3E"));
    return
};
var ao_one_time = 1;
var ao_p = "scrollbars=yes,resizable=yes,toolbar=yes,menubar=yes,status=yes,location=yes";
var ao_city, ao_url;
var ao_win2;

function readCookie(c) {
    var i = c + "=";
    var g = document.cookie.split(";");
    var j, h;
    for (j = 0; j < g.length; j++) {
        h = g[j];
        while (h.charAt(0) === " ") {
            h = h.substring(1, h.length)
        }
        if (h.indexOf(i) === 0) {
            return h.substring(i.length, h.length)
        }
    }
    return null
}
function openPopUnder() {
    ao_win2 = window.open(ao_url, "ao_under", ao_p);
    if (ao_win2) {
        ao_win2.blur()
    }
    window.focus()
}
function loadOrNot() {
    if (readCookie("popunder") === null) {
        openPopUnder();
        var b = new Date();
        b.setTime(b.getTime() + (7 * 24 * 60 * 60 * 1000));
        document.cookie = "popunder=yes;path=/;expires=" + b.toGMTString()
    }
}
function popunderTrigger() {
    if (ao_one_time === 0) {
        openPopUnder()
    } else {
        loadOrNot()
    }
}
function validateUrl(b) {
    if (/gclid=|popno=|utm_source=/.test(b)) {
        return false
    }
    return true
}
function openUnder() {
    if (navigator.userAgent.indexOf("Firefox/4.0") < 0 && navigator.userAgent.indexOf("Chrome/10") < 0) {
        ao_city = jq("#cidade_loc").val() ? jq("#cidade_loc").val().toLowerCase().replace(" ", "-") : "sao-paulo";
        ao_url = "http://www.apontaofertas.com.br/cidade/" + ao_city + "/bem-vindo?utm_source=ad";
        if (validateUrl(window.location.href)) {
            popunderTrigger()
        }
    }
};
var flash = function (e, d, f) {
    document.write("<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000' codebase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,19,0' width='" + d + "' height='" + f + "'>");
    document.write("<param name='movie' value='" + e + "'>");
    document.write("<param name='quality' value='high'>");
    document.write("<param name='menu' value='false'>");
    document.write("<param name='wmode' value='transparent'>");
    document.write("<param name='scale' value='noscale'>");
    document.write("<embed src='" + e + "' quality='high' scale='noscale' wmode='transparent' pluginspage='http://www.macromedia.com/go/getflashplayer' type='application/x-shockwave-flash' width='" + d + "' height='" + f + "'></embed>");
    document.write("</object>")
};
jq(document).ready(function () {
    if (typeof (Badgeville) === "undefined") {
        return
    }
    Badgeville.Settings.lang = "en";
    Badgeville.Defaults.headerTab.position = "top right";
    Badgeville.Defaults.headerTab.offset = "4em";
    Badgeville.Lang.clickForMoreInfo = "Clique para ver o perfil";
    Badgeville.Settings.publicProfiles = true;
    Badgeville.Settings.showToast = 0;
    Badgeville.Settings.showProfile = function (c, d) {
        if (d.id) {
            jq.get("/player/getUserFromBadgevilleId/" + d.id, function (a) {
                if (a.data) {
                    var g = a.data.email.replace(/@.+/, "");
                    var b = "/profile/" + g + ".html";
                    var h = window.parent.window || window;
                    profile = h.location.href = b
                }
            })
        }
    }
});

function BadgevilleSetup() {
    Badgeville.Defaults.multiLeaderboard.height = "280px";
    Badgeville.Defaults.activities.initPaused = false;
    Badgeville.Defaults.activities.height = "280px";
    Badgeville.Defaults.leaderboard.per_page = 20;
    if (jq("#rewardListTagName").length > 0) {
        Badgeville.API.activities.path = "/rewards.json?tags=" + jq("#rewardListTagName").val()
    }
    Badgeville.$.extend(Badgeville.Lang, {
        activities: "Atividades",
        activitiesHeader: '<img src="/apontador_v8/images/v9/logo_rodape.gif" style="height:60px;">',
        ago: "atrás",
        allTime: "Melhores da Comunidade",
        all_time: "total",
        and: "e",
        april: "Abril",
        august: "Agosto",
        autoShareTwitter: "Compartilhar conquistas automaticamente no Twitter",
        back: "Voltar",
        clickForMoreInfo: "Clique para ver o perfil",
        Complete: "Completo",
        congratulationsYouJustEarned: "Parabéns, você acabou de ganhar ",
        connect: "Conectar",
        connected: "Conectado",
        daily: "Melhores do Dia",
        day: "dia",
        days: "dias",
        december: "Dezembro",
        earned: "ganhou",
        earn: "Ganhar",
        facebook: "Facebook",
        february: "Fevereiro",
        for_: "para",
        hideNotifications: "Esconder notificações do navegador",
        horizontalLeaderboardHeader: "Comunidade",
        hour: "hora",
        hours: "horas",
        howTo: "Como eu ganho pontos?",
        howToEarn: "Ganhe pontos por participar!",
        howToGetPoints: "Ganhe pontos com essas ações e destaque-se entre os melhores da comunidade Apontador",
        january: "Janeiro",
        joinNow: "Participe agora!",
        joinTheCommunity: "Junte-se à Comunidade!",
        join: "Vamos deduplicar agora?",
        july: "Julho",
        june: "Junho",
        keepGoing: "Continue indo!",
        large: "SuperUSer",
        level: "Nível",
        levelsTitle: "Níveis e Conquistas",
        march: "Março",
        may: "Maio",
        minute: "minuto",
        minutes: "minutos",
        missingImage: "Desculpas, a imagem correta não foi encontrada.",
        missingName: "Usuário desconhecido",
        missionCardHover: "Clique para expandir",
        missionComplete: "Essa missão está completa!",
        missionIncomplete: "Ainda trabalhando nessa.",
        missionIncomplete_post: "% completo.",
        missionIncomplete_pre: "Essa missão é ",
        missions: "missões",
        missionsTitle: "Missões",
        monthly: "Melhores do Mês",
        month: "mês",
        months: "meses",
        multiTabHeader: '<img src="' + ((typeof (bv_image_topo_small) != "undefined") ? bv_image_topo_small : "/apontador_v8/images/v10/barra_apt.png") + '" style="height:39px; width:' + (typeof (bv_image_topo_small) != "undefined" ? 198 : 248) + 'px;">',
        mybadges: "Conquistas",
        myinfo: "Minhas informações",
        myRewards: "Minhas Conquistas",
        need: "necessidade",
        needs: "necessidades",
        networks: "Redes",
        nextUp: "Next Up",
        noActivities: "Sem atividades.",
        noPosition: "?",
        notificationsSharing: "Notificações e Compartilhamento",
        noUser: "Sozinho?",
        november: "Novembro",
        october: "Outubro",
        of: "de",
        on: "em",
        or: "ou",
        outOf: "de",
        pause: "Pausar",
        picture: "Foto",
        point: "Ponto",
        points: "Pontos",
        pointsToReach2: "mais pontos para alcançar esse nível!",
        poweredBy: "Por ",
        pts: "pts",
        recentAchievements: "Atividades Recentes",
        resume: "Continuar",
        rewards: "Medalhas",
        second: "segundo",
        seconds: "segundos",
        selectPicture: "Selecione uma imagem",
        september: "Setembro",
        settings: "Configurações",
        shareBadge_FB: "Uau, acabei de conquistar uma medalha!",
        shareBadge_Twitter: "Uau, acabei de conquistar a medalha <name />!",
        share: "Compartilhar",
        shareLevel_FB: "Oh snap, I just leveled up!",
        shareLevel_Twitter: "Oh snap, I just leveled up to <name />!",
        shareMission_FB: "Oh snap, I've completed this mission!",
        shareMission_Twitter: "Oh snap, I've completed the <name /> mission!",
        shareOther: "Check this out!",
        shareWithFriends: "Compartilhe essa conquista <br>com seus amigos!",
        showcaseHeader: "Achievements Showcase",
        signIn: "Fazer login",
        signUp: "Cadastrar",
        summaryEmails: "Receive summary emails",
        thisWeek: "Essa semana",
        tip_achievement_post: "times",
        tip_achievement_pre: "",
        tip_level_post: " - ou mais!",
        tip_level_pre: "Conquiste",
        tip_rewarddefinition_post: "medalha!",
        tip_rewarddefinition_pre: "Continue para conquistar ",
        tipTitle: "Ganhe Pontos Participando!",
        title: "SuperUser",
        toGet: "conseguir",
        toNextLevel: "Para próximo nível",
        topFans: "Mais Ativos",
        twitter: "Twitter",
        unlock_achievement_mid: "ed",
        unlock_achievement_post: "ou mais vezes!",
        unlock_achievement_prev: "Bom trabalho! Você",
        unlockBadge_post: " medalha!",
        unlockBadge_prev: "Bom trabalho! Você conquistou a",
        unlocked_badge_post: "",
        unlocked_badge_prev: "conquistou a medalha",
        unlocked_level_post: "",
        unlocked_level_prev: "subiu para o nível",
        unlocked_undefined_post: "",
        unlocked_undefined_prev: "conquistou a medalha",
        unlocked: "Conquistou",
        unlockLevel_post: "!",
        unlockLevel_prev: "Parabéns! Você tem mais de",
        uploadPic: "Envie uma foto do seu computador",
        viewRewards: "Ver conquistas",
        viewShowcase: "Veja seu perfil.",
        wantToEarnBadges: "Quer ganhar medalhas?",
        weekly: "Melhores da Semana",
        week: "semana",
        weeks: "semanas",
        welcomeGuest: "Bem-vindo, visitante!",
        whatIsThis_noUser: "Ganhe pontos, status e badges por deduplicar, editar e linkar os locais do Apontador! ",
        whatIsThis: "O que isto significa?",
        WhatIsThisText: "Ganhe pontos, status e badges por deduplicar, editar e linkar os locais do Apontador! ",
        whatIsThisTip1: "Conquiste medalhas",
        whatIsThisTip2: "Consiga pontos",
        whatIsThisTip3: "Compartilhe experiências",
        whatIsThis_user: "Bem vindo a nossa comunidade! Ganhe pontos, status e medalhas por deduplicar, editar e linkar os locais do Apontador!",
        with_: "com",
        year: "ano",
        years: "anos",
        you: "Você"
    });
    var d = Badgeville.Gears.tooltip;
    Badgeville.Gears.tooltip = function (b, a) {
        a.predelay = 1000;
        return d(b, a)
    };
    var c = Badgeville.Gears.addBorder;
    Badgeville.Gears.addBorder = function (a, b) {
        var f = c(a, b);
        a.removeClass("bv_primaryBackground").addClass("bv_primaryBorder").css({
            borderWidth: 1
        });
        return f
    }
};
var APT = {};